<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>子哥の小破站</title>
  
  <subtitle>从此只有眼前路，没有身后身</subtitle>
  <link href="http://zgtechnb666.github.io/atom.xml" rel="self"/>
  
  <link href="http://zgtechnb666.github.io/"/>
  <updated>2022-12-05T11:27:58.294Z</updated>
  <id>http://zgtechnb666.github.io/</id>
  
  <author>
    <name>子哥</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>原神私服搭建教程</title>
    <link href="http://zgtechnb666.github.io/2022/12/05/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>http://zgtechnb666.github.io/2022/12/05/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</id>
    <published>2022-12-05T11:00:19.000Z</published>
    <updated>2022-12-05T11:27:58.294Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文仅供学习交流，严禁用于商业用途，侵权请<a href="mailto:zigenb666@gamil.com">联系我</a>删除</strong></p><p><strong>本文所需文件附于文末，请自取</strong></p><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>本文使用的是3.2的服务端进行搭建示范。</p><p>如果你是小白，请在进行环境安装之前，重启一次电脑，把后台奇奇怪怪的软件关掉（新服务器忽略）。</p><p><code>关于本机和服务器的区别，我会在文章之中注明区别（没有标注的都需要操作），请关注好每一个字。</code></p><p>碰到问题请发布评论</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p><strong>Q1:我只想玩，不想搭建！</strong><br><strong>答：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-number">1.</span>修改客户端文件<br>下载补丁：文末文件/客户端/<span class="hljs-number">3.</span>x-x服-<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserAssembly</span>.</span></span>zip<br>解压后得到 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserAssembly</span>.</span></span>dll<br>打开官服路径:Genshin Impact Game\YuanShen_Data\Native<br>官服路径下自带一个 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserAssembly</span>.</span></span>dll <br>把他重命名为：UserAssembly-官服.dll<br>重命名的目的是为了备份 没有官服游玩需求可以直接覆盖<br>把补丁包里面解压的 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserAssembly</span>.</span></span>dll放到此路径<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">2</span>.下载代理：文末文件\代理软件\mhy代理转向<br>下载完成 解压 以管理员方式打开mhy代理转向<br>下面地址输入进去<br>gc<span class="hljs-selector-class">.rainkavik</span><span class="hljs-selector-class">.com</span>:<span class="hljs-number">320</span><br>下方代理端口留空！！！！！！！！！<br></code></pre></td></tr></table></figure><p><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.1v8r5321vsqo.webp" alt="代理设置示范图" title="代理设置示范图"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">进入游戏后记得关闭代理，否则电脑会出现无网络情况，服务器压力也大~！<br><br>指令搭配Tools指令箱使用 下载路径：文末文件\其他\GrasscutterTools-<span class="hljs-built_in">v1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">6</span>.exe<br></code></pre></td></tr></table></figure><p><strong>Q2：如何传送？</strong><br><strong>答：</strong>用鱼钩（最后一个图标）在地图上标记一个点位并点击确认即可传送至目标上空；在名称填写数字可更改传送高度。<br><strong>Q3：游戏指令</strong><br><strong>答：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">推荐使用 Grasscutter Tools工具箱 (仅 Win) 或 GrasscutterTools(网页版) 等生成指令<br>游戏登陆后默认有一个名为 Server 的好友，此为游戏控制台，可向其发送指令<br>游戏内 Server好友输入示例：/give all<br>run.bat运行窗口输入示例：give @<span class="hljs-number">10001</span> all<br>更多指令请使用 GrasscutterTools工具箱查看<br>如果你是手机党玩家，不清楚指令，游玩别人的服务器，这里推荐两条指令<br><span class="hljs-number">1</span>.获得所有物品 /give all<br><span class="hljs-number">2</span>.获取毕业圣遗物 /give <span class="hljs-number">76524</span> lv<span class="hljs-number">20 10001</span> <span class="hljs-number">999002</span> <span class="hljs-number">999001</span> <span class="hljs-number">201062,100</span> <span class="hljs-number">201091,100</span> <span class="hljs-number">989001,2</span> <span class="hljs-number">301241,120</span><br></code></pre></td></tr></table></figure><h1 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">下载安装jdk和mongodb：<br>文件下载路径：文末文件/环境<br>完整文件名：jdk-<span class="hljs-number">17.0</span>.<span class="hljs-number">2</span>_windows-x64_bin<span class="hljs-selector-class">.exe</span> <br>完整文件名：mongodb-windows-x86_64-<span class="hljs-number">5.0</span>.<span class="hljs-number">8</span><span class="hljs-built_in">-</span>(仅限win10及以上使用)<span class="hljs-selector-class">.msi</span> <br></code></pre></td></tr></table></figure><p>1.网盘路径下有两个 <code>mongodb</code>，根据自己的系统版本下载对应版本。<br>2.如果你是小白，请勿更改任何设定。<br><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.271q31c0yo5c.webp" alt="环境所需软件" title="环境所需软件"></p><h2 id="服务端下载"><a href="#服务端下载" class="headerlink" title="服务端下载"></a>服务端下载</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">文件下载路径：文末文件/服务端/full-grasscutter<span class="hljs-number">-3.</span>x-#####_RainKavik.zip<br></code></pre></td></tr></table></figure><p><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.3f2ln4ix4q40.webp" alt="服务器下载路径" title="服务器下载路径"></p><h2 id="运行服务端"><a href="#运行服务端" class="headerlink" title="运行服务端"></a>运行服务端</h2><p><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.6aafopc22eo0.webp" alt="服务端" title="服务端"><br>下载完解压得到下列文件<br><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.3ppfg9y8kba0.webp" alt="所得文件" title="所得文件"><br>修改config.json(本地跳过，服务器和局域网必须更改)</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm">必改：<span class="hljs-string">&quot;server-accessAddress&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>必改：<span class="hljs-string">&quot;game-accessAddress&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>两个 <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>，更改为服务器公网<span class="hljs-built_in">IP</span>或者局域网IPV4地址<br><span class="hljs-symbol">IPv4</span>地址获取：任务管理器-性能-以太网（WIFI）-右下角IPV4<br>修改完成切记保存关闭<br></code></pre></td></tr></table></figure><p><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.676a9pezh880.webp" alt="修改config.json" title="修改config.json"><br>运行 <code>run.bat</code> ，显示 <code>加载完成！输入 &quot;help&quot; 查看命令列表</code> 即代表开服成功，显示其他请看常见问题。</p><p><strong>run.bat启动成功示例图</strong><br><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.7ai743l7jx80.webp" alt="run.bat启动成功示例图" title="run.bat启动成功示例图"><br><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.3ng72k9q81e0.webp" alt="run.bat启动成功示例图" title="run.bat启动成功示例图"></p><p><strong>放行端口(本地和局域网跳过此步)</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">登录你的服务器管理后台-防火墙-添加防火墙规则<br>TCP443（Windows和<span class="hljs-keyword">Android免证书登录端口）</span><br><span class="hljs-keyword"></span>UDP22102（游戏数据交互）<br>注意：有个别服务器可能还需要在系统界面防火墙放行端口。<br>WIN+R打开运行，输入 wf.msc，在入站规则选项最右侧，新建规则-端口，添加以上三个端口。<br>出站规则不需要更改，默认全开。<br></code></pre></td></tr></table></figure><p><strong>完成以上，服务端教程到此结束，接下来是客户端教程。</strong></p><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>自行准备客户端（即你现在的官服）。</p><h2 id="补丁安装"><a href="#补丁安装" class="headerlink" title="补丁安装"></a>补丁安装</h2><p>两个代理软件都支持自动安装和还原补丁，这里我还是用手动安装为教程。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">补丁下载路径：文末文件<span class="hljs-regexp">/客户端/</span><span class="hljs-number">3</span>.x-x服-UserAssembly.zip<br>下载完成解压得到：UserAssembly.dll<br></code></pre></td></tr></table></figure><p>打开以下路径</p><blockquote><p>国服：<code>Genshin Impact Game\YuanShen_Data\Native</code><br>国际服：<code>Genshin Impact Game\GenshinImpact_Data\Native</code></p></blockquote><p>此目录下面有一个 <code>UserAssembly.dll</code>，请把它重命名为 <code>UserAssembly-官服.dll</code>，否则你将无法进入官服。<br>复制刚才解压得到的 <code>UserAssembly.dll</code>到此目录代替原先的文件。</p><p>此时你的<code>Native</code>文件夹应该有两个文件</p><h2 id="Windows连接服务器"><a href="#Windows连接服务器" class="headerlink" title="Windows连接服务器"></a>Windows连接服务器</h2><p>这里一共提供2种方法，任选其一，切记所有代理软件都需要已管理员身份运行。</p><h3 id="mhy代理转向"><a href="#mhy代理转向" class="headerlink" title="mhy代理转向"></a>mhy代理转向</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载地址：文末文件<span class="hljs-regexp">/代理软件/m</span>hy代理转向.zip<br>地址：<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">443</span><br>代理端口：留空！！！！！！！！！！<br>地址填写说明：IP:<span class="hljs-number">443</span>端口(Dispatch端口)，切记使用英文符号。<br></code></pre></td></tr></table></figure><p><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.5kb835jmqwo0.webp" alt="代理设置示例图" title="代理设置示例图"></p><h3 id="Genshin代理助手"><a href="#Genshin代理助手" class="headerlink" title="Genshin代理助手"></a>Genshin代理助手</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载地址：文末文件<span class="hljs-regexp">/代理软件/</span>Genshin代理助手.zip<br>地址：本机搭建填写 <span class="hljs-number">127.0</span>.<span class="hljs-number">01</span> 服务器搭建填写 服务器公网IP 端口 <span class="hljs-number">443</span><br>填写完成-启动代理<br></code></pre></td></tr></table></figure><p><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.6i4fpvp7w7o0.webp" alt="Genshin代理助手" title="Genshin代理助手"><br><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.447vnhfy66w0.webp" alt="Genshin代理助手" title="Genshin代理助手"></p><h3 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h3><p>双击打开 <code>YuanShen.exe</code> 或 <code>GenshinImpact.exe</code>，启动客户端<br>在服务器 <code>run.bat</code> 运行窗口输入以下语法进行账户注册<br>语法：<code>account create 登录账号 UID</code><br>例如：<code>account create rainkavik 10000</code><br>返回客户端输入你注册的账号，密码可随便填</p><blockquote><p>进到游戏内，立即关闭代理 ：长时间代理，你流量全走服务器，你电脑和服务器都累，而且还可能会被服务商 ban 机！</p></blockquote><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><h3 id="指令使用说明"><a href="#指令使用说明" class="headerlink" title="指令使用说明"></a>指令使用说明</h3><p>以下两种方式都需要对应插件的支持，网盘服务端已经内置。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">PC</span>玩家请搭配 GrasscutterTools指令工具使用<br>下载地址：文末文件\其他\GrasscutterTools-<span class="hljs-built_in">v1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">6</span>.exe<br>手机玩家在游戏内输入/wt获得指令邮件(<span class="hljs-built_in">pc</span>端适用)<br></code></pre></td></tr></table></figure><p>最新版本需要使用指令点亮地图：&#x2F;prop unlockmap 1<br><strong>网盘内的视频教程可能已经过时。</strong></p><h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><p>本服务端基于开源项目 <a href="https://github.com/Grasscutters/Grasscutter">Grasscutter</a> 。</p><h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><p>文章所需文件 <a href="https://cloud.rainkavik.com/s/zLEHx?path=/">点我下载</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;本文仅供学习交流，严禁用于商业用途，侵权请&lt;a href=&quot;mailto:zigenb666@gamil.com&quot;&gt;联系我&lt;/a&gt;删除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文所需文件附于文末，请自取&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;序</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>QQ机器人AutMan安装及对接</title>
    <link href="http://zgtechnb666.github.io/2022/12/05/QQ%E6%9C%BA%E5%99%A8%E4%BA%BAAutMan%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AF%B9%E6%8E%A5/"/>
    <id>http://zgtechnb666.github.io/2022/12/05/QQ%E6%9C%BA%E5%99%A8%E4%BA%BAAutMan%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AF%B9%E6%8E%A5/</id>
    <published>2022-12-05T09:40:19.000Z</published>
    <updated>2022-12-05T09:43:02.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>相信很多人在安装傻妞是总会遇到各种各样的困难，今天，我就教大家部署另一个机器人——<strong>AutMan</strong>（<del>一听这个名字就知道一定很好用</del>）</p><h1 id="部署与安装"><a href="#部署与安装" class="headerlink" title="部署与安装"></a>部署与安装</h1><p>安装完成并启动后可进入autMan后台地址：<code>http://【你的IP】:autMan端口/fanli/static</code></p><ol><li>Linux类系统<br><strong>稳定版</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">s=autMan;f=fanli;a=arm64;<span class="hljs-keyword">if</span> [[ $(<span class="hljs-built_in">uname</span> -a | grep <span class="hljs-string">&quot;x86_64&quot;</span>) != <span class="hljs-string">&quot;&quot;</span> ]];<span class="hljs-keyword">then</span> a=amd64;<span class="hljs-keyword">fi</span> ;<span class="hljs-keyword">if</span> [ ! -d <span class="hljs-variable">$s</span> ];<span class="hljs-keyword">then</span> <span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$s</span>;<span class="hljs-keyword">fi</span> ;<span class="hljs-built_in">cd</span> <span class="hljs-variable">$s</span>;wget https://github.com/hdbjlizhe/<span class="hljs-variable">$&#123;f&#125;</span>/releases/download/main/autMan_<span class="hljs-variable">$a</span>.tar.gz &amp;&amp; tar -zxvf autMan_<span class="hljs-variable">$a</span>.tar.gz &amp;&amp; <span class="hljs-built_in">rm</span> -rf autMan_<span class="hljs-variable">$a</span>.tar.gz &amp;&amp; <span class="hljs-built_in">chmod</span> 777 <span class="hljs-variable">$s</span>;pkill -9 <span class="hljs-variable">$s</span>;$(<span class="hljs-built_in">pwd</span>)/<span class="hljs-variable">$s</span> -t;<br></code></pre></td></tr></table></figure></li></ol><p><strong>尝鲜版</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">s=autMan;f=fanli;a=arm64;<span class="hljs-keyword">if</span> [[ $(<span class="hljs-built_in">uname</span> -a | grep <span class="hljs-string">&quot;x86_64&quot;</span>) != <span class="hljs-string">&quot;&quot;</span> ]];<span class="hljs-keyword">then</span> a=amd64;<span class="hljs-keyword">fi</span> ;<span class="hljs-keyword">if</span> [ ! -d <span class="hljs-variable">$s</span> ];<span class="hljs-keyword">then</span> <span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$s</span>;<span class="hljs-keyword">fi</span> ;<span class="hljs-built_in">cd</span> <span class="hljs-variable">$s</span>;wget https://github.com/hdbjlizhe/<span class="hljs-variable">$&#123;f&#125;</span>/releases/download/debug/autMan_<span class="hljs-variable">$a</span>.tar.gz &amp;&amp; tar -zxvf autMan_<span class="hljs-variable">$a</span>.tar.gz &amp;&amp; <span class="hljs-built_in">rm</span> -rf autMan_<span class="hljs-variable">$a</span>.tar.gz &amp;&amp; <span class="hljs-built_in">chmod</span> 777 <span class="hljs-variable">$s</span>;pkill -9 <span class="hljs-variable">$s</span>;$(<span class="hljs-built_in">pwd</span>)/<span class="hljs-variable">$s</span> -t;<br></code></pre></td></tr></table></figure><p><strong>autMan(Linux系统含amd64\arm64)运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">进入autMan文件夹：<span class="hljs-built_in">cd</span> /root/autMan<br>指令启动：./autMan -t<br>静默指令：重启<br></code></pre></td></tr></table></figure><p><img src="https://images.zgtech.tech/?/images/2022/11/23/9UEmub6gaZ/start_autMan.jpg" alt="start_autMan" title="start_autMan"></p><ol start="2"><li>Windows系统<br>{fwalert type&#x3D;”info”}下载解压后直接运行exe文件{&#x2F;fwalert}</li></ol><p><strong>稳定版:</strong><a href="https://gh.zgtech.icu/https://github.com/hdbjlizhe/fanli/releases/download/main/autMan_win.tar.gz">稳定版点我下载</a></p><p><strong>尝鲜版:</strong><a href="https://gh.zgtech.icu/https://github.com/hdbjlizhe/fanli/releases/download/main/autMan_win.tar.gz">尝鲜版点我下载</a></p><p><strong>autMan(Windows系统含amd64\arm64)运行</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">启动windows命令提示符或powershell等命令行工具<br>进入autMan文件夹<br>指令启动：.\\autMan.exe -<span class="hljs-built_in">t</span><br>静默指令：重启<br></code></pre></td></tr></table></figure><p><img src="https://images.zgtech.tech/?/images/2022/11/23/kmrMrDqG6T/start_autMan_win.png" alt="start_autMan_win" title="start_autMan_win"></p><p>{fwcline start&#x3D;”#01d0ff” end&#x3D;”#fc3e85”}{&#x2F;fwcline}</p><ol start="3"><li>稳定版和尝鲜版</li></ol><p><strong>稳定版-&gt;尝鲜版</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">指令：<span class="hljs-built_in">set</span> autMan taste <span class="hljs-literal">true</span><br>指令：更新<br>或者用指令：更新尝鲜版<br></code></pre></td></tr></table></figure><p><strong>尝鲜版-&gt;稳定版</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">指令：<span class="hljs-built_in">set</span> autMan taste <span class="hljs-literal">false</span><br>指令：更新<br>或者用指令：更新稳定版<br></code></pre></td></tr></table></figure><p><strong>示例：</strong><br><img src="https://images.zgtech.tech/?/images/2022/11/23/jIVgSHzpJH/taste.png" alt="taste" title="taste"></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">设置更新时的代理指令：<span class="hljs-keyword">set</span> autMan ghproxy http:<span class="hljs-comment">//xxxx</span><br>开启或关闭更新时代理：<span class="hljs-keyword">set</span> autMan download_use_ghproxy <span class="hljs-literal">true</span>/<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>守护奥特曼情况下的更新</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">root账号ssh登陆，进入autMan文件夹<br>输入命令停止守护：systemctl <span class="hljs-literal">stop</span> autMan<br>手动运行奥特曼：./autMan -t<br>在奥特曼运行交互界面输入指令：更新<br>更新完成后关闭奥特曼，并杀死奥特曼后台。指令：pkill -<span class="hljs-number">9</span> autMan<br>启用守护：systemctl <span class="hljs-literal">start</span> autMan<br></code></pre></td></tr></table></figure></li><li><p>后台登录<br>安装完成并启动后可进入autMan后台地址：<code>http://autMan的ip:autMan端口/fanli/static</code></p></li></ol><p>首次使用需要设置登录密码,设置完成后跳转到登录页面，输入密码登录成功</p><p><strong>示例：</strong><br><img src="https://images.zgtech.tech/?/images/2022/11/23/wLIBbU1390/first_use.png" alt="first_use" title="first_use"></p><h1 id="对接账号"><a href="#对接账号" class="headerlink" title="对接账号"></a>对接账号</h1><h2 id="对接QQ"><a href="#对接QQ" class="headerlink" title="对接QQ"></a>对接QQ</h2><p>{fwalert type&#x3D;”warning”}说明：你要准备2个QQ号，1个用来做机器人，1个用来做管理员。<br>QQ框架目前可选方案有NODE-ONEBOT、OICQ、GO-CQHTTP等。下面以对接NODE-ONEBOT为例，对接OICQ可参见：HTTPS:&#x2F;&#x2F;GITHUB.COM&#x2F;TAKAYAMA-LILY&#x2F;OICQ&#x2F;TREE&#x2F;MASTER&#x2F;HTTP-API{&#x2F;fwalert}</p><ol><li>对接Linux版QQ<br><strong>screen运行oicq</strong><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">安装<span class="hljs-built_in">npm</span>，命令：apt install <span class="hljs-built_in">npm</span><br>安装oicq。命令：<span class="hljs-built_in">npm</span> i -g oicq@<span class="hljs-number">1</span><br>安装screen 命令：apt install screen<br>创建名称为oicq的新窗口命令：screen -S oicq<br>oicq配置文件在<span class="hljs-regexp">/root/</span>.oicq目录，名称为config.js，在其中配置反向ws地址<br>启动oicq命令：oicq，之后需要扫码或密码登录qq<br>等到运行起来后，就ctrl+A+D切回到主窗口，如果切不回去，就直接关掉ssh窗口，造成不要在oicq窗口ctrl+c，这样就会切断oicq的运行。<br></code></pre></td></tr></table></figure><strong>对接go-cqhttp(推荐)</strong></li></ol><p>{fwcode type&#x3D;”warning”}<br>由于文章篇幅有限制，请前往 <a href="https://blog.zgtech.icu/archives/go-cqhttp.html">https://blog.zgtech.icu/archives/go-cqhttp.html</a> 查看部署方法<br>{&#x2F;fwcode}</p><ol start="2"><li>对接Windows版QQ</li></ol><p><strong>下载文件</strong></p><p>下载windows版go-cqhttp，<a href="https://github.com.seafy.ml/Mrs4s/go-cqhttp/releases/">查看这里下载</a><br><img src="https://images.zgtech.tech/?/images/2022/11/23/5cNnA5zRaJ/go-cqhttp-win.png" alt="go-cqhttp-win" title="go-cqhttp-win"></p><p><strong>配置</strong></p><p>先双击运行一下exe文件go-cqhttp，会生成配置文件，配置文件中选择模式（如：手表模式），填写机器人qq号，反向ws地址那里填入<code>ws://autMan地址:autMan端口/qq/receive</code></p><p><strong>运行</strong></p><p>命令行启动运行,启动时扫码登录或输入密码登录</p><p><img src="https://images.zgtech.tech/?/images/2022/11/23/n9pa6ftVIH/go-cqhttp-run.png" alt="go-cqhttp-run" title="go-cqhttp-run"><br><strong>由于篇幅有限，我们下期再说 如何对接其他方式的 autMan 机器人</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;相信很多人在安装傻妞是总会遇到各种各样的困难，今天，我就教大家部署另一个机器人——&lt;strong&gt;AutMan&lt;/strong&gt;（&lt;del&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>autMan对接go-cqHttp保姆级教程</title>
    <link href="http://zgtechnb666.github.io/2022/12/05/autMan%E5%AF%B9%E6%8E%A5go-cqHttp%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B/"/>
    <id>http://zgtechnb666.github.io/2022/12/05/autMan%E5%AF%B9%E6%8E%A5go-cqHttp%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B/</id>
    <published>2022-12-05T09:39:15.000Z</published>
    <updated>2022-12-05T09:40:05.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>node-onebo用pm2，screen守护都不稳定，node-onebot扫码后ctrl+c，pm2没守护直接掉了，screen只能守护几个小时。因为服务器地区与你常登q的位置不同，时常有密码登入验证，导致验证失败。在密码无法登入的情况下，我们可以用go-cqHttp！</p><h1 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h1><h2 id="获取文件"><a href="#获取文件" class="headerlink" title="获取文件"></a>获取文件</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd autMan/   <span class="hljs-comment">#进入autMan根目录</span><br>mkdir go-cqhttp &amp;&amp; cd go-cqhttp   <span class="hljs-comment">#创建go-cqhttp文件夹并进入</span><br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Mrs4s/g</span>o-cqhttp<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.0.0-rc3/g</span>o-cqhttp_linux_amd64.tar.gz   <span class="hljs-comment">#拉取go-cqhttp文件</span><br>tar -zxvf go-cqhttp_linux_amd64.tar.gz   <span class="hljs-comment">#解压文件</span><br>./go-cqhttp   <span class="hljs-comment">#启动go-cqhttp</span><br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="https://images.zgtech.tech/?/images/2022/11/23/JwtqlA3vwn/635794398.png" alt="配置" title="配置"></p><p>选择 “<strong>3</strong>” ，然后回车，<code>Ctrl+c</code>结束进程</p><p><strong>修改配置文件</strong><br>{fwalert type&#x3D;”warning”}<br>如果是FinalShell，可以双击点开修改{&#x2F;fwalert}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /root/autMan/go-cqhttp<br>vim config.yml <br></code></pre></td></tr></table></figure><p>英文输入法下，按 <strong>i</strong> ，修改 <code>go-cqhttp</code> 默认配置文件的登陆账号，反代地址</p><p><img src="https://images.zgtech.tech/?/images/2022/11/23/ecikBey5qp/3357109154.png" alt="6" title="6"><br><img src="https://images.zgtech.tech/?/images/2022/11/23/XgEfd3brZ9/1995410760.png" alt="7" title="7"></p><ul><li>127.0.0.1 为服务器本地（指amtMan和go-cqHttp都在同一服务器）</li><li>8080 为amtMan的端口</li><li>请根据实际情况修改 :ws:&#x2F;&#x2F;127.0.0.1:8080&#x2F;qq&#x2F;receive<br>点击<code>Esc</code>键后输入<code>:wq</code>保存退出</li></ul><h2 id="守护"><a href="#守护" class="headerlink" title="守护"></a>守护</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./go-cqhttp   <span class="hljs-comment">#重新运行</span><br></code></pre></td></tr></table></figure><p>扫码登入后 <code>ctrl+c</code> 结束进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./go-cqhttp -d  <span class="hljs-comment">#后台运行</span><br></code></pre></td></tr></table></figure><h2 id="更换机器人"><a href="#更换机器人" class="headerlink" title="更换机器人"></a>更换机器人</h2><p>进入 <code>/go-cqhttp</code>目录把 <code>session.token</code> 文件删除即可然后重新运行扫码绑定</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>祝大家部署成功，autMan启航，我呢，自从用了go-cqhttp后就没发生过掉线的事了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;node-onebo用pm2，screen守护都不稳定，node-onebot扫码后ctrl+c，pm2没守护直接掉了，screen只能守护</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>破解CSDN复制和关注限制</title>
    <link href="http://zgtechnb666.github.io/2022/12/05/%E7%A0%B4%E8%A7%A3CSDN%E5%A4%8D%E5%88%B6%E5%92%8C%E5%85%B3%E6%B3%A8%E9%99%90%E5%88%B6/"/>
    <id>http://zgtechnb666.github.io/2022/12/05/%E7%A0%B4%E8%A7%A3CSDN%E5%A4%8D%E5%88%B6%E5%92%8C%E5%85%B3%E6%B3%A8%E9%99%90%E5%88%B6/</id>
    <published>2022-12-05T09:37:30.000Z</published>
    <updated>2022-12-05T09:38:04.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><p>　作为博客的大门派之一，CSDN 和子哥科技的运营方式一直以来都大相径庭，与子哥科技的简约、初心未改相比 CSDN 仿佛在商业化的道路上越走越远，现在 CSDN 不登录还无法复制文章内容了，一整个被无语到。而且还有这种强制恶心的关注 才能展开看到你想看的文章<img src="https://zigeltd.eu.org/?/gh/kevinlu98/freecdn@1.4//face/emotions/22.gif" alt="白眼"></p><h1 id="开始破解"><a href="#开始破解" class="headerlink" title="开始破解"></a>开始破解</h1><p> 这里以chrome浏览器为例<br>当你看到一篇CSDN文章的时候，底部会有<code>关注博主即可阅读全文</code>的字样。<br>此时你可以打开chrome浏览器的开发者工具（快捷键F12），然后切换到<code>控制台</code>界面。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var article_content=document.get<span class="hljs-constructor">ElementById(<span class="hljs-string">&quot;article_content&quot;</span>)</span>;<br>article_content.remove<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;style&quot;</span>)</span>;<br><br>var follow_text=document.get<span class="hljs-constructor">ElementsByClassName(&#x27;<span class="hljs-params">follow</span>-<span class="hljs-params">text</span>&#x27;)</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;<br>follow_text.parentElement.parentElement.remove<span class="hljs-constructor">Child(<span class="hljs-params">follow_text</span>.<span class="hljs-params">parentElement</span>)</span>;<br><br>var hide_article_box=document.get<span class="hljs-constructor">ElementsByClassName(&#x27; <span class="hljs-params">hide</span>-<span class="hljs-params">article</span>-<span class="hljs-params">box</span>&#x27;)</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;<br>hide_article_box.parentElement.remove<span class="hljs-constructor">Child(<span class="hljs-params">hide_article_box</span>)</span>;<br></code></pre></td></tr></table></figure><p>然后复制上面的javascript代码、回车就可以了, 你会惊奇的发现 不需要关注就可以阅读全部文章了<br>终于可以开心的阅读啦 哈哈哈哈!</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">javascript:<span class="hljs-built_in">document</span>.body.contentEditable=<span class="hljs-string">&#x27;true&#x27;</span>;<span class="hljs-built_in">document</span>.designMode=<span class="hljs-string">&#x27;on&#x27;</span>;<br></code></pre></td></tr></table></figure><p>然后复制上面的javascript代码、回车就可以了, 你会惊奇的发现 不需要关注就可以阅读全部文章了<br>终于可以随心所欲的复制啦 哈哈哈哈!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;吐槽&quot;&gt;&lt;a href=&quot;#吐槽&quot; class=&quot;headerlink&quot; title=&quot;吐槽&quot;&gt;&lt;/a&gt;吐槽&lt;/h1&gt;&lt;p&gt;　作为博客的大门派之一，CSDN 和子哥科技的运营方式一直以来都大相径庭，与子哥科技的简约、初心未改相比 CSDN 仿佛在商业化的道路上越走</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用CF Wocker搭建在线代理</title>
    <link href="http://zgtechnb666.github.io/2022/12/05/jsproxy-cf/"/>
    <id>http://zgtechnb666.github.io/2022/12/05/jsproxy-cf/</id>
    <published>2022-12-05T09:30:05.000Z</published>
    <updated>2022-12-05T09:36:53.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>今天看到一篇文章，主题是推荐大家用谷歌搜索，但众所周知，谷歌已经退出中国很久了，一般都需要借助工具才能访问，然后我又看到上面写了一个利用Jsproxy搭建代理可以访问谷歌，我就跟着试了一试，发现还挺好玩的，就分享出来了。</p><h1 id="Jsproxy"><a href="#Jsproxy" class="headerlink" title="Jsproxy"></a>Jsproxy</h1><p><strong>官方文档：</strong></p><blockquote><p>一个基于浏览器端 JS 实现的在线代理，Github项目地址：<a href="https://github.com/EtherDream/jsproxy">https://github.com/EtherDream/jsproxy</a></p></blockquote><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-27%20101417.png" alt="1" title="效果"></p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-27%20101506.png" alt="2" title="效果"></p><h1 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h1><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>{fwalert type&#x3D;”info”}该项目分为 CF-Wocker 版 与 服务器 版，本文讲述CF-Wocker 版的搭建方法{&#x2F;fwalert}</p><ol><li>打开 <a href="https://workers.cloudflare.com/">CF Wocker首页</a>，点击 <code>Sign up</code> 进行注册。</li><li>输入邮箱+密码，然后点击 <code>Create Account</code> 创建账户。</li><li>登录你刚刚注册用的邮箱，去接受一下Cloud Flare发给你的确认注册邮件</li><li>选一个你喜欢的英文单词作为子域名，然后点击 <code>Set Up subdomain</code> 。</li><li>再次确认，确认无误后点击 <code>Yes，Let‘s Go</code>。</li></ol><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li>点击 <code>Create a Worker</code> 创建一个项目。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20190811163949.webp" alt="3" title="3"></p><ol start="2"><li>在 <code>script</code> 左侧代码区，编写完毕后，点击 <code>Save and Deploy</code> 保存并部署下，就可以查看你的服务了。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/ub1w208mve.png" alt="4" title="4"></p><ol start="3"><li>选中下图红框部分的代码，按键盘上的 <code>退格键</code> 或者 <code>Delete键</code> 删掉</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20190811164154.webp" alt="5" title="5"></p><ol start="4"><li>将文末代码粘贴到刚刚你删除代码的地方，然后点击 <code>Save and Deploy</code> 保存并发布。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/xgxrbk7c00.png" alt="6" title="6"></p><ol start="5"><li>最后会让你二次确认一下，接着点击确认即可</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20190811164501.webp" alt="7" title="7"></p><p>最后会返回刚刚创建项目的地方，你会得到一个地址（下图红框部分），复制这个地址，粘贴到浏览器打开</p><p><strong>PS：因为workers.devDNS污染事件，CFworkers默认域名后缀workers.dev被全线DNS污染，所以CFworkers默认域名已经越来越不稳定了，我们可以使用自己的自定义域名来解决。</strong></p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><ol><li>把自己的域名转移到CloudFlare，托管于CloudFlare，这个很简单，不会的可以自己百度。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/222af4f7475fc504e0745d927dd4ce25.png" alt="8" title="8"></p><ol start="2"><li>在自己的域名新增一个DNS <code>AAAA记录</code>，名称自定义，<code>IPv6</code> 为 <code>100::</code> ，<code>最重要的是打开小黄云（CDN）</code></li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-27%20105144.png" alt="9" title="9"></p><ol start="3"><li><strong>进入你的域名，不是你的首页！</strong>，进入Workers，添加路由</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/949c862c9143664dc5726efacb9f7898.png" alt="10" title="10"></p><ol start="4"><li>路由填写上一步的 <code>子域名 + /*</code>。</li></ol><p>{fwalert type&#x3D;”info”}比如我刚刚DNS解析的域名是 <code>proxy.xxxxx.cf</code> ，那在路由一栏则填写 <code>proxy.xxxxx.cf/*</code> ，服务选择需要自定义域名访问的Worker，就是你刚刚创建的Worker，表示通过这个自定义域名来访问Worker服务{&#x2F;fwalert}</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/7K6JMHH2T(G77ZV_%7D(X5BYJ.png" alt="11" title="11"></p><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>完成后就可以通过自定义的域名访问Worker服务了。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-27%20101417.png" alt="效果" title="效果"></p><h1 id="所需代码"><a href="#所需代码" class="headerlink" title="所需代码"></a>所需代码</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27;use strict&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * static files (404.html, sw.js, conf.js)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ASSET_URL</span> = <span class="hljs-string">&#x27;https://etherdream.github.io/jsproxy&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">JS_VER</span> = <span class="hljs-number">10</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAX_RETRY</span> = <span class="hljs-number">1</span><br><br><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;RequestInit&#125; */</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PREFLIGHT_INIT</span> = &#123;<br>  status: <span class="hljs-number">204</span>,<br>  headers: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(&#123;<br>    <span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span>,<br>    <span class="hljs-string">&#x27;access-control-allow-methods&#x27;</span>: <span class="hljs-string">&#x27;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#x27;</span>,<br>    <span class="hljs-string">&#x27;access-control-max-age&#x27;</span>: <span class="hljs-string">&#x27;1728000&#x27;</span>,<br>  &#125;),<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;any&#125; body</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;number&#125; status</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;Object&lt;string, string&gt;&#125; headers</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeRes</span>(<span class="hljs-params">body, status = <span class="hljs-number">200</span>, headers = &#123;&#125;</span>) </span>&#123;<br>  headers[<span class="hljs-string">&#x27;--ver&#x27;</span>] = JS_VER<br>  headers[<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>] = <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(body, &#123;status, headers&#125;)<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;string&#125; urlStr </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newUrl</span>(<span class="hljs-params">urlStr</span>) </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">URL</span>(urlStr)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>  &#125;<br>&#125;<br><br><br><span class="hljs-title function_ invoke__">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, e =&gt; &#123;<br>  <span class="hljs-keyword">const</span> ret = <span class="hljs-title function_ invoke__">fetchHandler</span>(e)<br>    .<span class="hljs-keyword">catch</span>(err =&gt; <span class="hljs-title function_ invoke__">makeRes</span>(<span class="hljs-string">&#x27;cfworker error:\n&#x27;</span> + err.stack, <span class="hljs-number">502</span>))<br>  e.<span class="hljs-title function_ invoke__">respondWith</span>(ret)<br>&#125;)<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;FetchEvent&#125; e </span><br><span class="hljs-comment"> */</span><br>async <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchHandler</span>(<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">req</span> = e.request<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">urlStr</span> = req.url<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">urlObj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">URL</span>(urlStr)<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">path</span> = urlObj.href.<span class="hljs-title function_ invoke__">substr</span>(urlObj.origin.length)<br><br>  <span class="hljs-keyword">if</span> (urlObj.protocol === <span class="hljs-string">&#x27;http:&#x27;</span>) &#123;<br>    urlObj.protocol = <span class="hljs-string">&#x27;https:&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">makeRes</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">301</span>, &#123;<br>      <span class="hljs-string">&#x27;strict-transport-security&#x27;</span>: <span class="hljs-string">&#x27;max-age=99999999; includeSubDomains; preload&#x27;</span>,<br>      <span class="hljs-string">&#x27;location&#x27;</span>: urlObj.href,<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (path.<span class="hljs-title function_ invoke__">startsWith</span>(<span class="hljs-string">&#x27;/http/&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">httpHandler</span>(req, path.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-number">6</span>))<br>  &#125;<br><br>  <span class="hljs-keyword">switch</span> (path) &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/http&#x27;</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">makeRes</span>(<span class="hljs-string">&#x27;请更新 cfworker 到最新版本!&#x27;</span>)<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/ws&#x27;</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">makeRes</span>(<span class="hljs-string">&#x27;not support&#x27;</span>, <span class="hljs-number">400</span>)<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/works&#x27;</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">makeRes</span>(<span class="hljs-string">&#x27;it works&#x27;</span>)<br>  <span class="hljs-keyword">default</span>:<br>    <span class="hljs-comment">// static files</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">fetch</span>(ASSET_URL + path)<br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;Request&#125; req</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;string&#125; pathname</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">httpHandler</span>(<span class="hljs-params">req, pathname</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">reqHdrRaw</span> = req.headers<br>  <span class="hljs-keyword">if</span> (reqHdrRaw.<span class="hljs-title function_ invoke__">has</span>(<span class="hljs-string">&#x27;x-jsproxy&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> Response.<span class="hljs-title function_ invoke__">error</span>()<br>  &#125;<br><br>  <span class="hljs-comment">// preflight</span><br>  <span class="hljs-keyword">if</span> (req.method === <span class="hljs-string">&#x27;OPTIONS&#x27;</span> &amp;&amp;<br>      reqHdrRaw.<span class="hljs-title function_ invoke__">has</span>(<span class="hljs-string">&#x27;access-control-request-headers&#x27;</span>)<br>  ) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-literal">null</span>, PREFLIGHT_INIT)<br>  &#125;<br><br>  let acehOld = <span class="hljs-literal">false</span><br>  let rawSvr = <span class="hljs-string">&#x27;&#x27;</span><br>  let rawLen = <span class="hljs-string">&#x27;&#x27;</span><br>  let rawEtag = <span class="hljs-string">&#x27;&#x27;</span><br><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">reqHdrNew</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(reqHdrRaw)<br>  reqHdrNew.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;x-jsproxy&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br><br>  <span class="hljs-comment">// 此处逻辑和 http-dec-req-hdr.lua 大致相同</span><br>  <span class="hljs-comment">// https://github.com/EtherDream/jsproxy/blob/master/lua/http-dec-req-hdr.lua</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">refer</span> = reqHdrNew.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;referer&#x27;</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">query</span> = refer.<span class="hljs-title function_ invoke__">substr</span>(refer.<span class="hljs-title function_ invoke__">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>) + <span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">if</span> (!query) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">makeRes</span>(<span class="hljs-string">&#x27;missing params&#x27;</span>, <span class="hljs-number">403</span>)<br>  &#125;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">param</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(query)<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [k, v] of Object.<span class="hljs-title function_ invoke__">entries</span>(param)) &#123;<br>    <span class="hljs-keyword">if</span> (k.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) === <span class="hljs-string">&#x27;--&#x27;</span>) &#123;<br>      <span class="hljs-comment">// 系统信息</span><br>      <span class="hljs-keyword">switch</span> (k.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-number">2</span>)) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;aceh&#x27;</span>:<br>        acehOld = <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;raw-info&#x27;</span>:<br>        [rawSvr, rawLen, rawEtag] = v.<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-string">&#x27;|&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 还原 HTTP 请求头</span><br>      <span class="hljs-keyword">if</span> (v) &#123;<br>        reqHdrNew.<span class="hljs-title function_ invoke__">set</span>(k, v)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        reqHdrNew.<span class="hljs-title function_ invoke__">delete</span>(k)<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!param.<span class="hljs-title function_ invoke__">has</span>(<span class="hljs-string">&#x27;referer&#x27;</span>)) &#123;<br>    reqHdrNew.<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;referer&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// cfworker 会把路径中的 `//` 合并成 `/`</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">urlStr</span> = pathname.<span class="hljs-title function_ invoke__">replace</span>(/^(https?):\/+/, <span class="hljs-string">&#x27;$1://&#x27;</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">urlObj</span> = <span class="hljs-title function_ invoke__">newUrl</span>(urlStr)<br>  <span class="hljs-keyword">if</span> (!urlObj) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">makeRes</span>(<span class="hljs-string">&#x27;invalid proxy url: &#x27;</span> + urlStr, <span class="hljs-number">403</span>)<br>  &#125;<br><br>  <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;RequestInit&#125; */</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">reqInit</span> = &#123;<br>    method: req.method,<br>    headers: reqHdrNew,<br>    redirect: <span class="hljs-string">&#x27;manual&#x27;</span>,<br>  &#125;<br>  <span class="hljs-keyword">if</span> (req.method === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    reqInit.body = req.body<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">proxy</span>(urlObj, reqInit, acehOld, rawLen, <span class="hljs-number">0</span>)<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;URL&#125; urlObj </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;RequestInit&#125; reqInit </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;number&#125; retryTimes </span><br><span class="hljs-comment"> */</span><br>async <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">proxy</span>(<span class="hljs-params">urlObj, reqInit, acehOld, rawLen, retryTimes</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">res</span> = await <span class="hljs-title function_ invoke__">fetch</span>(urlObj.href, reqInit)<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">resHdrOld</span> = res.headers<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">resHdrNew</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(resHdrOld)<br><br>  let expose = <span class="hljs-string">&#x27;*&#x27;</span><br>  <br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [k, v] of resHdrOld.<span class="hljs-title function_ invoke__">entries</span>()) &#123;<br>    <span class="hljs-keyword">if</span> (k === <span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span> ||<br>        k === <span class="hljs-string">&#x27;access-control-expose-headers&#x27;</span> ||<br>        k === <span class="hljs-string">&#x27;location&#x27;</span> ||<br>        k === <span class="hljs-string">&#x27;set-cookie&#x27;</span><br>    ) &#123;<br>      <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">x</span> = <span class="hljs-string">&#x27;--&#x27;</span> + k<br>      resHdrNew.<span class="hljs-title function_ invoke__">set</span>(x, v)<br>      <span class="hljs-keyword">if</span> (acehOld) &#123;<br>        expose = expose + <span class="hljs-string">&#x27;,&#x27;</span> + x<br>      &#125;<br>      resHdrNew.<span class="hljs-title function_ invoke__">delete</span>(k)<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (acehOld &amp;&amp;<br>      k !== <span class="hljs-string">&#x27;cache-control&#x27;</span> &amp;&amp;<br>      k !== <span class="hljs-string">&#x27;content-language&#x27;</span> &amp;&amp;<br>      k !== <span class="hljs-string">&#x27;content-type&#x27;</span> &amp;&amp;<br>      k !== <span class="hljs-string">&#x27;expires&#x27;</span> &amp;&amp;<br>      k !== <span class="hljs-string">&#x27;last-modified&#x27;</span> &amp;&amp;<br>      k !== <span class="hljs-string">&#x27;pragma&#x27;</span><br>    ) &#123;<br>      expose = expose + <span class="hljs-string">&#x27;,&#x27;</span> + k<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (acehOld) &#123;<br>    expose = expose + <span class="hljs-string">&#x27;,--s&#x27;</span><br>    resHdrNew.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;--t&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// verify</span><br>  <span class="hljs-keyword">if</span> (rawLen) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">newLen</span> = resHdrOld.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;content-length&#x27;</span>) || <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">badLen</span> = (rawLen !== newLen)<br><br>    <span class="hljs-keyword">if</span> (badLen) &#123;<br>      <span class="hljs-keyword">if</span> (retryTimes &lt; MAX_RETRY) &#123;<br>        urlObj = await <span class="hljs-title function_ invoke__">parseYtVideoRedir</span>(urlObj, newLen, res)<br>        <span class="hljs-keyword">if</span> (urlObj) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">proxy</span>(urlObj, reqInit, acehOld, rawLen, retryTimes + <span class="hljs-number">1</span>)<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">makeRes</span>(res.body, <span class="hljs-number">400</span>, &#123;<br>        <span class="hljs-string">&#x27;--error&#x27;</span>: `bad <span class="hljs-attr">len</span>: $&#123;newLen&#125;, <span class="hljs-attr">except</span>: $&#123;rawLen&#125;`,<br>        <span class="hljs-string">&#x27;access-control-expose-headers&#x27;</span>: <span class="hljs-string">&#x27;--error&#x27;</span>,<br>      &#125;)<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (retryTimes &gt; <span class="hljs-number">1</span>) &#123;<br>      resHdrNew.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;--retry&#x27;</span>, retryTimes)<br>    &#125;<br>  &#125;<br><br>  let status = res.status<br><br>  resHdrNew.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;access-control-expose-headers&#x27;</span>, expose)<br>  resHdrNew.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>  resHdrNew.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;--s&#x27;</span>, status)<br>  resHdrNew.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;--ver&#x27;</span>, JS_VER)<br><br>  resHdrNew.<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;content-security-policy&#x27;</span>)<br>  resHdrNew.<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;content-security-policy-report-only&#x27;</span>)<br>  resHdrNew.<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;clear-site-data&#x27;</span>)<br><br>  <span class="hljs-keyword">if</span> (status === <span class="hljs-number">301</span> ||<br>      status === <span class="hljs-number">302</span> ||<br>      status === <span class="hljs-number">303</span> ||<br>      status === <span class="hljs-number">307</span> ||<br>      status === <span class="hljs-number">308</span><br>  ) &#123;<br>    status = status + <span class="hljs-number">10</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(res.body, &#123;<br>    status,<br>    headers: resHdrNew,<br>  &#125;)<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;URL&#125; urlObj </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isYtUrl</span>(<span class="hljs-params">urlObj</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    urlObj.host.<span class="hljs-title function_ invoke__">endsWith</span>(<span class="hljs-string">&#x27;.googlevideo.com&#x27;</span>) &amp;&amp;<br>    urlObj.pathname.<span class="hljs-title function_ invoke__">startsWith</span>(<span class="hljs-string">&#x27;/videoplayback&#x27;</span>)<br>  )<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;URL&#125; urlObj </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;number&#125; newLen </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;Response&#125; res </span><br><span class="hljs-comment"> */</span><br>async <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseYtVideoRedir</span>(<span class="hljs-params">urlObj, newLen, res</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (newLen &gt; <span class="hljs-number">2000</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">isYtUrl</span>(urlObj)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>  &#125;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">data</span> = await res.<span class="hljs-title function_ invoke__">text</span>()<br>    urlObj = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">URL</span>(data)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">isYtUrl</span>(urlObj)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> urlObj<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;今天看到一篇文章，主题是推荐大家用谷歌搜索，但众所周知，谷歌已经退出中国很久了，一般都需要借助工具才能访问，然后我又看到上面写了一个利用Js</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zgtechnb666.github.io/2022/12/05/hello-world/"/>
    <id>http://zgtechnb666.github.io/2022/12/05/hello-world/</id>
    <published>2022-12-05T06:33:41.485Z</published>
    <updated>2022-12-05T06:33:41.485Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
