<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>子哥の小破站</title>
  
  <subtitle>从此只有眼前路，没有身后身</subtitle>
  <link href="http://zgtechnb666.github.io/atom.xml" rel="self"/>
  
  <link href="http://zgtechnb666.github.io/"/>
  <updated>2022-12-27T10:38:25.938Z</updated>
  <id>http://zgtechnb666.github.io/</id>
  
  <author>
    <name>子哥</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建Heimdall导航页项目</title>
    <link href="http://zgtechnb666.github.io/2022/12/27/%E6%90%AD%E5%BB%BAHeimdall%E5%AF%BC%E8%88%AA%E9%A1%B5%E9%A1%B9%E7%9B%AE/"/>
    <id>http://zgtechnb666.github.io/2022/12/27/%E6%90%AD%E5%BB%BAHeimdall%E5%AF%BC%E8%88%AA%E9%A1%B5%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-12-27T10:37:51.000Z</published>
    <updated>2022-12-27T10:38:25.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>众所周知，Heimdall是一款好看的导航页项目，部署方便，外观简约，十分实用，子哥今天分享给大家。</p></blockquote><h1 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h1><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221227183334.png" alt="预览" title="预览"> </p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="使用Docker-compose"><a href="#使用Docker-compose" class="headerlink" title="使用Docker-compose"></a>使用Docker-compose</h2><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">version</span>: &quot;2.1&quot;<br><span class="hljs-attribute">services</span>:<br><span class="hljs-attribute">heimdall</span>:<br><span class="hljs-attribute">image</span>: lscr.io/linuxserver/heimdall:latest<br><span class="hljs-attribute">container_name</span>: heimdall<br><span class="hljs-attribute">environment</span>:<br><span class="hljs-literal">-</span> PUID=1000<br><span class="hljs-literal">-</span> PGID=1000<br><span class="hljs-literal">-</span> TZ=Europe/London<br><span class="hljs-attribute">volumes</span>:<br><span class="hljs-literal">-</span> /path/to/appdata/config:/config<br><span class="hljs-attribute">ports</span>:<br><span class="hljs-literal">-</span> 7001:80<br><span class="hljs-literal">-</span> 7002:443<br><span class="hljs-attribute">restart</span>: unless-stopped<br></code></pre></td></tr></table></figure><h2 id="使用Docker"><a href="#使用Docker" class="headerlink" title="使用Docker"></a>使用Docker</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -d <span class="hljs-attribute">--name</span>=heimdall -p 8080:80 -p 8081:443 -v /home/docker/heimdall:<span class="hljs-built_in">/config </span><span class="hljs-attribute">--restart</span>=unless-stopped linuxserver/heimdall<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;众所周知，Heimdall是一款好看的导航页项目，部署方便，外观简约，十分实用，子哥今天分享给大家。&lt;/p&gt;
&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>自己搭建一个二级域名分发平台</title>
    <link href="http://zgtechnb666.github.io/2022/12/27/%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E5%88%86%E5%8F%91%E5%B9%B3%E5%8F%B0/"/>
    <id>http://zgtechnb666.github.io/2022/12/27/%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E5%88%86%E5%8F%91%E5%B9%B3%E5%8F%B0/</id>
    <published>2022-12-27T10:13:51.000Z</published>
    <updated>2022-12-27T10:15:30.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>快乐二级域名分发可以说是二级域名分发程序的扛把子了，几年前挺流行的，这里分享一个能用的进行了简约美化的版本。</p></blockquote><h1 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h1><p><a href="https://cloud.zgtech.icu/s/gnfB">点击这里</a>进行源码下载。</p><h1 id="搭建实例"><a href="#搭建实例" class="headerlink" title="搭建实例"></a>搭建实例</h1><p><strong><a href="https://dns.zgtech.asia/">子哥二级域名分发</a></strong></p><h1 id="源码演示"><a href="#源码演示" class="headerlink" title="源码演示"></a>源码演示</h1><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/6666666.png" alt="源码演示" title="源码演示"> </p><h1 id="部署教程"><a href="#部署教程" class="headerlink" title="部署教程"></a>部署教程</h1><ol><li>设置 <code>php</code> 版本为<strong>74</strong>。</li><li>设置站点伪静态为 <code>Thinkphp</code> 。</li><li>访问 <code>域名/install</code> 按照提示进行安装。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;快乐二级域名分发可以说是二级域名分发程序的扛把子了，几年前挺流行的，这里分享一个能用的进行了简约美化的版本。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>搭建QQ机器人对接chatGPT</title>
    <link href="http://zgtechnb666.github.io/2022/12/13/%E6%90%AD%E5%BB%BAQQ%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AF%B9%E6%8E%A5chatGPT/"/>
    <id>http://zgtechnb666.github.io/2022/12/13/%E6%90%AD%E5%BB%BAQQ%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AF%B9%E6%8E%A5chatGPT/</id>
    <published>2022-12-13T02:47:51.000Z</published>
    <updated>2022-12-13T02:50:09.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>最近 openApi 的 chatGPT 火遍全网，相信很多人都在想如何把 chatGPT 做成QQ机器人。今天，子哥就教大家如何搭建一个QQ机器人并对接chatGPT。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>一个服务器：Windos，Centos，Ubuntu</li><li>环境：Python</li><li>一个用作机器人的QQ号</li><li>一个OpenGPT账号（不会注册的 <a href="https://www.zgtech.asia/archives/chatgpt.html">点击这里</a> 查看我之前的教程）</li><li><del>一个会动的双手</del></li></ul><h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><h2 id="获取chatGPT的token"><a href="#获取chatGPT的token" class="headerlink" title="获取chatGPT的token"></a>获取chatGPT的token</h2><p>登录上自己的 <code>chatGPT</code> 账号，然后按住 <code>F12</code> 打开 <code>开发者工具</code> ，找到 <code>应用</code> ，选择Cookie，接着将 <code>__Secure-next-auth.session-token</code> 的值复制出来，一会需要用到。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213091431.png" alt="抓包" title="抓包"> </p><p><strong>PS:文章所需文件请在文末自取</strong></p><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>解压缩文末文件，里面有三个文件夹：<code>go-cqhttp_linux_amd64</code>、<code>go-cqhttp_windows_386</code>、<code>py</code>。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213092054.png" alt="解压缩" title="解压缩"> </p><p>将 <code>go-cqhttp_linux_amd64</code> 文件夹和 <code>py</code> 文件夹上传到服务器。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213093840.png" alt="上传文件" title="上传文件"> </p><h2 id="配置py"><a href="#配置py" class="headerlink" title="配置py"></a>配置py</h2><p>安装Python就自行百度吧，打开 <code>chat-gpt-qbot.py</code> ，<code>第7行</code> 填写自己的QQ号作为机器人，第9行填上刚才抓取到的 <code>token</code> 。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213094136.png" alt="配置py1" title="配置py1"> </p><p>然后滑到最下面，将151行的端口改成自己想用的，并放行该端口。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213094221.png" alt="配置py2" title="配置py2"> </p><p>填写完按住 <code>Ctrl + S</code> 保存。</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cd /bot-<span class="hljs-keyword">test</span>/py <span class="hljs-comment">#这里的/bot-test/py是你存放文件的地方</span><br>pip <span class="hljs-keyword">install</span> -r requirements.txt 或 pip3 <span class="hljs-keyword">install</span> -r requirements.txt<br></code></pre></td></tr></table></figure><p>接下来运行 <code>chat-gpt-qbot.py</code>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> chat-gpt-qbot.<span class="hljs-keyword">py</span> 或 <span class="hljs-keyword">python3</span> chat-gpt-qbot.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213094901.png" alt="安装依赖" title="安装依赖"> </p><h2 id="常见问题1"><a href="#常见问题1" class="headerlink" title="常见问题1"></a>常见问题1</h2><p><strong>Q1：</strong>为什么我在运行pip时会以下错误呢？</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-symbol">WARNING: </span>Running pip as the ‘root’ user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv<br></code></pre></td></tr></table></figure><p><strong>答：</strong> 这里报错的原因是因为我们需要一个虚拟环境，虚拟环境可以使不同的虚拟环境相互独立，不会影响到其他应用；可以防止出现包管理混乱和版本冲突，而且不会影响全局的python环境。<br>配置虚拟环境:</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">cd #回到根目录<br><span class="hljs-keyword">python</span> -m  venv tutorial-<span class="hljs-keyword">env</span> 或 python3 -m  venv tutorial-<span class="hljs-keyword">env</span>  (tutorial-<span class="hljs-keyword">env</span>是虚拟环境的名称，可以随意更改)<br><span class="hljs-keyword">source</span> tutorial-<span class="hljs-keyword">env</span>/bin/activate<br></code></pre></td></tr></table></figure><p>运行好上面的三行命令后，如果前缀已经变了的话，那就说明已经安装好虚拟环境了，我们就可以下一步了</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213094602.png" alt="Q1-1" title="Q1-1"> </p><p>安装好虚拟环境后，我们就可以继续安装依赖了。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cd /bot-<span class="hljs-keyword">test</span>/py <span class="hljs-comment">#这里的/bot-test/py是你存放文件的地方</span><br>pip <span class="hljs-keyword">install</span> -r requirements.txt 或 pip3 <span class="hljs-keyword">install</span> -r requirements.txt<br></code></pre></td></tr></table></figure><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213094714.png" alt="Q1-2" title="Q1-2"> </p><p>没有报错说明我们安装好依赖了。</p><h2 id="配置go-cqhttp"><a href="#配置go-cqhttp" class="headerlink" title="配置go-cqhttp"></a>配置go-cqhttp</h2><p>打开 <code>go-cqhttp_linux_amd64</code> 文件夹里面的 <code>config.yml</code> 文件，并在第4行填上自己的机器人QQ号，密码不用填，我们进行扫码登录。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213095004.png" alt="配置go-cqhttp" title="配置go-cqhttp"></p><p>然后还是滑到最下面，在 <code>108行</code> 填上相应的 <code>url</code> 。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>:port#将port改成刚刚设置的端口号，我刚刚设置的是<span class="hljs-number">2666</span>，所以我将port改成了<span class="hljs-number">2666</span>就行<br><br></code></pre></td></tr></table></figure><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213102255.png" alt="url" title="url"></p><p>修改好之后按住 <code>Ctrl + S</code> 保存，这样我们就可以运行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> bot-test/go-cqhttp_linux_amd64/ <span class="hljs-comment">#同理bot-test/go-cqhttp_linux_amd64/是你的位置</span><br>./go-cqhttp<br></code></pre></td></tr></table></figure><p><strong>注意：这里可能提示权限不够</strong></p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213102450.png" alt="url" title="url"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 777 go-cqhttp <span class="hljs-comment">#对go-cqhttp文件进行提权</span><br></code></pre></td></tr></table></figure><p>我们再运行，会让我们扫码。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213102532.png" alt="扫码" title="扫码"></p><h2 id="常见问题2"><a href="#常见问题2" class="headerlink" title="常见问题2"></a>常见问题2</h2><p><strong>Q1：</strong> 为什么我扫码时会出现登录错误呢？</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213102532.png" alt="扫码" title="扫码"></p><p><strong>答：</strong> 因为你扫码的手机与服务器不在同一局域网。</p><p><strong>解决方法1：</strong> 下载“爱加速”APP，连上你服务器所在的地区，再次扫码即可。</p><hr><p><strong>解决方法2：</strong> 在自己的电脑上打开文末文件里的 <code>go-cqhttp_windows_386</code> 文件夹，再对 <code>config.yml</code> 配置一遍(和刚刚在服务器上配置的一样)，配置好双击运行 <code>go-cqhttp.bat</code> ，然后会让我们扫码。我们进行扫码。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213103029.png" alt="扫码登录成功" title="扫码登录成功"></p><p>登录好之后，关闭窗口，程序会在 <code>go-cqhttp_windows_386</code> 文件夹中生成 <code>session.token</code> 文件，我们找到这个文件，并将它上传到服务器上的 <code>go-cqhttp_linux_amd64</code> 文件夹里。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213103240.png" alt="找到session.token" title="找到session.token"><br><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213103245.png" alt="上传session.token" title="上传session.token"></p><p>这个时候我们再次输入 <code>./go-cqhttp</code> 即可正常运行。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213103431.png" alt="正常运行" title="正常运行"></p><p>输入 <strong>ctrl+c</strong> 结束进程，并输入以下命令进行后台运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./go-cqhttp -d  <span class="hljs-comment">#后台运行</span><br></code></pre></td></tr></table></figure><h2 id="安装screen进行守护"><a href="#安装screen进行守护" class="headerlink" title="安装screen进行守护"></a>安装screen进行守护</h2><p>这个时候我们就配置好了，可是一旦我们关闭这个ssh窗口，py程序就会结束进程 。所以我们需要安装scrreen进行守护。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yun <span class="hljs-keyword">install </span><span class="hljs-keyword">screen </span>-y<br></code></pre></td></tr></table></figure><p>新建一个screen窗口并命名为pybot</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">screen -S pybot</span><br></code></pre></td></tr></table></figure><p>进入新窗口后，出入以下命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">source</span> tutorial-env/bin/activate #需要进入虚拟环境<br><span class="hljs-keyword">cd</span> /<span class="hljs-keyword">cd</span> /bot-test/<span class="hljs-keyword">py</span> #这里的/bot-test/<span class="hljs-keyword">py</span>是你存放文件的地方<br><span class="hljs-keyword">python</span> chat-gpt-qbot.<span class="hljs-keyword">py</span> 或 <span class="hljs-keyword">python3</span> chat-gpt-qbot.<br></code></pre></td></tr></table></figure><p>然后我们同时按住 <code>Ctrl + A + D</code> 即可完成screen守护。<br>到这里教程也就结束了，让我们看一下结果吧。</p><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><h2 id="私聊"><a href="#私聊" class="headerlink" title="私聊"></a>私聊</h2><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213104113.png" alt="私聊效果" title="私聊效果"></p><h2 id="群聊"><a href="#群聊" class="headerlink" title="群聊"></a>群聊</h2><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221213104207.png" alt="群聊效果" title="群聊效果"></p><p>然后就可以愉快的使用了，想在群里使用的话，直接把机器人拉进群，然后@机器人提问。</p><p><strong>注意：建议打开禁止加好友，不然机器人QQ容易被封禁！！！</strong></p><h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><p>文中所需文件请<a href="https://cloud.zgtech.icu/s/zmFz">点我下载</a>，提取密码：<strong>zgtech</strong></p><p>有问题欢迎留言</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;最近 openApi 的 chatGPT 火遍全网，相信很多人都在想如何把 chatGPT 做成QQ机器人。今天，子哥就教大家如何搭建一个Q</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>chatGPT注册保姆级教程</title>
    <link href="http://zgtechnb666.github.io/2022/12/12/chatGPT%E6%B3%A8%E5%86%8C%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B/"/>
    <id>http://zgtechnb666.github.io/2022/12/12/chatGPT%E6%B3%A8%E5%86%8C%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B/</id>
    <published>2022-12-12T13:58:36.000Z</published>
    <updated>2022-12-12T13:59:49.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>最近 openApi 的 chatGPT 火遍全网，可是有很多朋友不知道怎么注册。今天，子哥就教大家如何注册 chatGPT。</p><h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><h2 id="完善信息"><a href="#完善信息" class="headerlink" title="完善信息"></a>完善信息</h2><ol><li>进入 <a href="https://chat.openai.com/auth/login">chatGPT 官网</a>（<strong>必须使用科学上网开全局，要求是韩国，日本，印度，新加坡，美国这几个地址。不能用香港，否则可能会出异常状态</strong>）</li><li>点击 <strong>Sign up</strong></li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-12%20205819.png" alt="Sign up" title="Sign up"> </p><ol start="3"><li>输入你的邮箱，点击 <strong>Continue</strong></li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212210113.png" alt="Continue" title="Continue"></p><ol start="4"><li>输入密码进行下一步</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212210113.png" alt="PassWord" title="PassWord"><br><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212210337.png" alt="PassWord" title="PassWord"></p><ol start="5"><li>然后你的邮箱会受到一封邮件（如果没收到请检查垃圾邮箱），打开邮件链接，慢<br>慢等待。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212210408.png" alt="Check mails" title="Check mails"></p><ol start="6"><li>看到下面界面。就离成功更近了一步，点击中间的 <code>login</code> 下一步了。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212210544.png" alt="login" title="login"></p><ol start="7"><li>输入名字进行下一步</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212214512.png" alt="name" title="name"></p><ol start="8"><li>接下来会让你选择手机号，由于+86 和 google voive 无法注册 <code>chatGPT</code>，所以找一个接码平台是最好的选择，推荐 <a href="https://sms-activate.org/cn">https://sms-activate.org/cn</a>，支持支付宝付款，充值 0.2 美元(大概 11 卢布)，然后左边服务里面搜索 <code>openai</code> ，选印度号码，购买后就能获取到一个手机号，填入 openai 注册页面就可以接收验证码了，只需要花1.5 RMB 。</li></ol><h2 id="进行接码"><a href="#进行接码" class="headerlink" title="进行接码"></a>进行接码</h2><ol><li>注册一个新的账号</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212214902.png" alt="name" title="name"></p><ol start="2"><li>选择常用邮箱注册</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212214941.png" alt="name" title="name"></p><ol start="3"><li>进行充值，大概 0.2 美元</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212215007.png" alt="name" title="name"></p><ol start="4"><li>拉到最下面，选择支付宝支付</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212215043.png" alt="name" title="name"></p><ol start="5"><li>充值完成之后，回到首页，选择最左边</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212215116.png" alt="name" title="name"></p><ol start="6"><li>接着搜索 openai，选择 <code>印度区</code>，选择购物车</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212215152.png" alt="name" title="name"></p><ol start="7"><li>将选择的号码复制到下图界面，点击下一步。慢慢等待验证码，如果几分钟过去了还没接到就换个接码号码。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212215231.png" alt="name" title="name"></p><h2 id="完成注册"><a href="#完成注册" class="headerlink" title="完成注册"></a>完成注册</h2><ol><li>收到验证码之后，出现下图就成功了。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212215359.png" alt="name" title="name"></p><ol start="2"><li>随便选一个进去就可以，如果对接其他项目，选择 token 。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212215438.png" alt="name" title="name"></p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212215508.png" alt="name" title="name"></p><ol start="3"><li>如果不对接其他项目的话，成功之后 <a href="https://chat.openai.com/chat">点击这里</a> 就可以使用 chatGPT。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20221212215623.png" alt="name" title="name"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;最近 openApi 的 chatGPT 火遍全网，可是有很多朋友不知道怎么注册。今天，子哥就教大家如何注册 chatGPT。&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>一滴水从高处落下来，会不会砸死人？</title>
    <link href="http://zgtechnb666.github.io/2022/12/08/%E4%B8%80%E6%BB%B4%E6%B0%B4%E4%BB%8E%E9%AB%98%E5%A4%84%E8%90%BD%E4%B8%8B%E6%9D%A5%EF%BC%8C%E4%BC%9A%E4%B8%8D%E4%BC%9A%E7%A0%B8%E6%AD%BB%E4%BA%BA%EF%BC%9F/"/>
    <id>http://zgtechnb666.github.io/2022/12/08/%E4%B8%80%E6%BB%B4%E6%B0%B4%E4%BB%8E%E9%AB%98%E5%A4%84%E8%90%BD%E4%B8%8B%E6%9D%A5%EF%BC%8C%E4%BC%9A%E4%B8%8D%E4%BC%9A%E7%A0%B8%E6%AD%BB%E4%BA%BA%EF%BC%9F/</id>
    <published>2022-12-08T10:28:48.000Z</published>
    <updated>2022-12-08T10:31:19.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p><strong>有一个相当古老的段子是这么说的：</strong></p><blockquote><p>为了涨姿势，我加入一个物理博士群，见到有人问：一滴水从很高的地方落下来，会不会弄死人？<br>群里一下就热闹起来，各种公式，各种假设，各种阻力，重力，加速度的讨论。<br>一小时后我默默的问了一句：你们没有淋过雨吗？<br>群里，突然死一般的寂静……然后，然后我就被踢出群了……</p></blockquote><p>显然这个段子只不过是用来嘲笑高学历人缺乏常识的。道理我懂了，但水从高处落下来，到底会发生什么呢？</p><h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><h2 id="第一种情况：水（仅限液态）在地球上不经人类任何干预而掉下来"><a href="#第一种情况：水（仅限液态）在地球上不经人类任何干预而掉下来" class="headerlink" title="第一种情况：水（仅限液态）在地球上不经人类任何干预而掉下来"></a>第一种情况：水（仅限液态）在地球上不经人类任何干预而掉下来</h2><p>满足这一情况，只能是降雨。<br>所谓降雨，就是高空云层中凝结的小水滴，因为重力超过了气流承载力，而落下来。气流承载力并不很大，所以雨滴也没办法变得很大；就算有些雨滴能够变得稍大一点，下落过程也会很容易让它分崩离析。<br>其结果就是，雨滴很快就会因为空气阻力而抵达所谓的“终末速度”——重力和阻力平衡，不会再加速。在密度和形状不变的情况下，重力和长度三次方成正比，但阻力只和长度二次方成正比——所以粗略说来，越大的物体终末速度越快。雨滴直径通常不过几毫米，5毫米雨滴重量不过0.1克，终末速度大概在9-13米&#x2F;秒，和自行车最大速度相当；再加上它只是液体，这点能量对人来说啥都干不了。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/3602176523.png" alt="诚意满满的作者本人手绘！" title="诚意满满的作者本人手绘！"><br>所以大家尽可嘲笑我花了三段来讲解最日常的常识——不过别得意太早，这篇文章才刚刚开始呢。</p><h2 id="第二种情况：水（物态不限）在地球上不经人类任何干预而掉下来"><a href="#第二种情况：水（物态不限）在地球上不经人类任何干预而掉下来" class="headerlink" title="第二种情况：水（物态不限）在地球上不经人类任何干预而掉下来"></a>第二种情况：水（物态不限）在地球上不经人类任何干预而掉下来</h2><p>在自然环境下，显而易见的场景是冰雹。<br>虽然冰雹的形状和密度其实和水滴相差无几，但它有一个大优势：硬。硬度保证了就算较大的冰雹下落过程里也不会解体，还保证了它掉在你头上的时候瞬间冲击力比水大很多。大号冰雹直径可以达到15厘米，重量达0.5千克，而落下来的时候其终末速度则可达到50米&#x2F;秒以上（不过，因为碰撞和融化等原因，它不一定总能达到这个速度）。一块0.5千克的冰块，用手丢出去都能把人砸个不轻，何况以时速近两百千米的速度撞击人头部呢？因冰雹而受伤甚至死亡的案例屡见不鲜，也不足为怪了。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/2051849110.png" alt="未按比例绘制" title="未按比例绘制"> </p><p>其实还有一种更加可怕的场景，不过这里我要卖个关子，留待后面再说。</p><h2 id="第三种情况：水（液态雨滴大小）在没有大气层的地球上掉下来，不考虑蒸发。"><a href="#第三种情况：水（液态雨滴大小）在没有大气层的地球上掉下来，不考虑蒸发。" class="headerlink" title="第三种情况：水（液态雨滴大小）在没有大气层的地球上掉下来，不考虑蒸发。"></a>第三种情况：水（液态雨滴大小）在没有大气层的地球上掉下来，不考虑蒸发。</h2><p>从现在开始就不是无人类干涉的“自然”环境了，但原题也没这要求对吧。<br>没有大气层又不计入蒸发的话，水滴终于可以实现真正的自由落体了。（如果考虑蒸发会怎样？真空中水会立刻沸腾，但沸腾过程吸热，结果是一部分蒸发掉、另一部分结成小冰块，对于我们的结论没有本质的区别。）它会一直加速，直到撞击地面为止。如果它按照9.8米&#x2F;秒^2的速度匀加速，那么它想加到多快就有多快，别说干掉一个人，就算歼灭整只舰队甚至毁灭地球也不在话下。诚然，稍有常识的人就会看出来永远匀加速是不可能的——你不能突破光速。但这依然不影响我们获得任意大的能量、毁灭任意大的星球和任意多的人。<br>不幸的是，我们限定了地球这个条件。离地球太远，引力会变弱，加速度也会变小。其实牛顿早就证明了一个不是很符合直觉的结论：就算水滴距离地球是无限远，它的最大速度也是有限的。<br>我们可以根据引力势能公式E&#x3D;-GMm&#x2F;r进行计算，一滴水如果重量为0.1克，从无穷远落到地面的时候能够获得大约6千焦的能量，换言之，它的速度大约是11km&#x2F;s</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-08%20181822.png" alt="喊破喉咙也不会有人来救你的！" title="喊破喉咙也不会有人来救你的！"> </p><p>可不要小看这个速度。当水滴撞击平面的时候，会遭受挤压，边缘的水就会以更快的速度向外扩散，产生激波。有其他的博文模拟了水滴以0.5km&#x2F;s的速度撞击平面，结果向外扩散的水流速度高达6km&#x2F;s，其力度足以打碎普通玻璃。现在我们的初始速度是它的20倍，其结果可想而知。<br>或者换一个角度，AK47子弹出膛动能大约是2千焦，而我们的水滴是它的三倍。水滴虽然不是硬的，但也没什么弹性，而且速度比子弹快得多得多，所以绝大部分能量会在短得多的时间里传递给头骨。重伤甚至死亡应该是妥妥的事儿。<br>但是我们当然不能就此知足了，所以：</p><h2 id="第四种情况：水（液态大小不限）在有大气层的地球上掉下来"><a href="#第四种情况：水（液态大小不限）在有大气层的地球上掉下来" class="headerlink" title="第四种情况：水（液态大小不限）在有大气层的地球上掉下来"></a>第四种情况：水（液态大小不限）在有大气层的地球上掉下来</h2><p>呼，大气层回来了。但别高兴得太早。<br>如果你从空中泼一桶水下去，那么其杀伤力和一滴水没有本质差异，因为气流等因素会把这桶水再撕裂成水滴。但是如果你泼的是一游泳池、一湖甚至一大海的水，那么就没有足够的时间分散开来，其结果将是毁灭性的。<br><strong>网络漫画xkcd的作者兰道尔·门罗（Randall Monroe）</strong> 曾经计算过，如果夏天一场暴雨的所有雨水化作一个大水滴，那么这个水滴体积0.6立方千米，重量6亿吨（差不多是所有人类加在一起的总重量）。这坨水如果从云的正常高度落下来，那么落地瞬间速度大概是200米&#x2F;秒。落地点的空气遭到强烈压缩，产生瞬间高温，足以让地上的草烧起来——所幸下一瞬间就会有巨量的水将野火熄灭在萌芽中。如果你不幸站在这个地方，你遭受的水压将会超过马里亚纳海沟最深处。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/698734456.png" alt="水滴落下来只需一分钟，你跑不掉的啦" title="水滴落下来只需一分钟，你跑不掉的啦"> </p><p>你当然是死定了，但还没完——记得上面提到的水滴撞击时向四面八方产生的冲击波吗？现在方圆几千米之内会什么都不剩，二三十千米之内的建筑也基本上都要玩完，再远一点的地方可能会借着地势幸存——如果他们没有被接下来的洪水冲走的话。<br>那么问题来了：能不能再给力一点。</p><h2 id="第五种情况：水在太阳上掉下来"><a href="#第五种情况：水在太阳上掉下来" class="headerlink" title="第五种情况：水在太阳上掉下来"></a>第五种情况：水在太阳上掉下来</h2><p>对于一个邪恶科学家而言，这才是真正的好戏开场。<br><strong>有位学者曾发表了以下结论：</strong><br>假如不考虑太阳大气和温度，那么水滴落到太阳上的最大速度是617.5千米&#x2F;秒——同时也是太阳表面的“逃逸速度”。比地球大很多，人在上面也会死得惨很多，不过在上面的人反正也已经死了，无所谓啦。<br>但水落到太阳上，还有别的效果。和地球不同，太阳是个巨大的核反应炉，它的燃料是氢，维持炉体稳定的是压力和引力的平衡。如果太阳变大了，引力就会占优势，让太阳燃烧得更加猛烈、同时寿命也变得更短——而往上倒一氧化二氢，正好可以达成这一目的。<br>所以，如果我们往太阳上倒水，那么它会变得更热，距离它的终结也更近。<br>倒的水如果多一点，地球上就会出现极其明显的温室效应，农业系统和海岸居住区崩溃，整个人类社会陷入混乱。<br>如果再多一点，强烈阳光带来的硅酸盐风化会把越来越多的二氧化碳锁在岩石圈里不再流通，短期内可能会缓解疯狂的温室效应，但长期下来将意味着大气二氧化碳无法维持碳三植物的存活，整个地球生态系统崩溃。<br>如果再多一点，碳四植物也将消亡。<br>如果再多一点，海洋的蒸发将失去平衡，大量水蒸气滞留在大气中加剧温室效应，最终地球表面将成为潮湿大温室，海洋全部消失。如果此时生命还没有全部灭绝，也只能在极个别的地方苟延残喘了。<br>继续多下去，太阳就会加速前进，最终成为红巨星把地球吞没——如果没有这些额外的氢，地球还有一定概率逃过一劫，但倒了这么多水上去之后，这一命运就无可避免了。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/2750777523.png" alt="邪恶行星科学家的终极梦想，诚招土豪资助一起毁灭世界，机不可失！" title="邪恶行星科学家的终极梦想，诚招土豪资助一起毁灭世界，机不可失！"> </p><p>然后，太阳会变成一颗超新星，最终也许在巨大的额外质量之下成为一颗黑洞。<br>所以：</p><h2 id="第六种情况：一滴水在黑洞上掉下来"><a href="#第六种情况：一滴水在黑洞上掉下来" class="headerlink" title="第六种情况：一滴水在黑洞上掉下来"></a>第六种情况：一滴水在黑洞上掉下来</h2><p>从开始读这篇文章，你就该想到肯定会走到这一步的。<br><strong>以下内容均为引用！！！</strong><br>黑洞很沉。非常沉。它是如此之沉，以至于当别的物体落向它时，会释放出巨大的引力势能，足以产生大量的X射线。氢原子核聚变放出的能量只有它静质量的0.7%，而物体落入黑洞里放出的能量可以达到静质量的百分之几十。<br>和别的电离辐射相比，X射线算是杀伤力很低的了，譬如一次胸透带来的终生癌症风险还不到百万分之一（相比之下一个人正常过一辈子得癌症的概率就有三分之一）。但是黑洞带来的X射线量极其巨大。低质量X射线双星几乎全部能量都以X射线形式释放出来，所以往上滴一滴0.1克的正常水滴，近似相当于把水质量几分之一转化为等效能量，再把这些能量以X射线形式全打出去——这差不多是10^12焦耳。更糟的是，这些X射线能量较低，是穿透力有限的“软”X射线，照进人体只需几厘米就会几乎被完全吸收。假如这么多能量被一个人全吸收了，那么足以把他汽化几千遍；假如按照8戈瑞的“必死”辐射剂量估算，那么这些X射线足够杀死18亿人。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/849860972.png" alt="不要在意这个抽象派画风" title="不要在意这个抽象派画风"> </p><p><strong>开个玩笑</strong>：一滴水从高处落下来，所能产生的最大杀伤力，需要的不过是一个黑洞在下面接着它。就算三体人的那个“水滴”能单挑整个地球舰队，在这真正的水滴面前也不过是小巫见大巫。</p><p><strong>这个故事告诉我们一个道理：千万别和学物理的待在同一个群。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;有一个相当古老的段子是这么说的：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了涨姿势，我加入一个物理博士群</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>部署Docker项目自动抓取京东wskey</title>
    <link href="http://zgtechnb666.github.io/2022/12/07/%E9%83%A8%E7%BD%B2Docker%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9Cwskey/"/>
    <id>http://zgtechnb666.github.io/2022/12/07/%E9%83%A8%E7%BD%B2Docker%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E6%8A%93%E5%8F%96%E4%BA%AC%E4%B8%9Cwskey/</id>
    <published>2022-12-07T13:20:35.000Z</published>
    <updated>2022-12-07T13:35:58.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>自从东子走了以后，京东呆瓜的门槛是越来越高。现在限制网页端登陆，无法使用短信登录抓取ck是大势所趋。这是我们应该怎们办呢？可以部署一个Docker来用网页抓取wskey。</p><h1 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h1><p>我先放上一幢图，让你们看看有多么的方便</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-07%20205319.png" alt="预览图" title="预览图"> </p><h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><p>1.运行命令部署 Docker 项目</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -itd -v <span class="hljs-string">&quot;<span class="hljs-subst">$(pwd)</span>&quot;</span>:/run/data -p 8081:8080 mzzsfy/proxy-support</span><br></code></pre></td></tr></table></figure><ol start="2"><li>将解压好的 <code>自动wskey-插件</code> 放入 <code>data/plugin</code> 目录下。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-07%20210515.png" alt="plugin目录" title="plugin目录"> </p><ol start="3"><li>将解压好的 <code>自动抓wskey-ui</code> 放入 <code>data/web/static</code> 目录下。</li></ol><p><strong>注意：是static目录，而不是web目录！！！</strong></p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-07%20210600.png" alt="static目录" title="static目录"> </p><ol start="4"><li>修改 <code>data/plugin/lib/config.js</code> 中的配置，设置为自己的</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-07%20211102.png" alt="config.js" title="config.js"> </p><ol start="5"><li><p>访问对应端口即可正常抓取。</p></li><li><p>若没有配置 config.js ，需要到 <code>我的&gt;客户服务</code> 去手动复制wskey</p></li></ol><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p>最终效果如下图所示</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-07%20211622.png" alt="最终效果" title="最终效果"> </p><h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><p>文章所些许文件 <a href="https://cloud.zgtech.icu/s/8ycL">点我下载</a> 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;自从东子走了以后，京东呆瓜的门槛是越来越高。现在限制网页端登陆，无法使用短信登录抓取ck是大势所趋。这是我们应该怎们办呢？可以部署一个Doc</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>每天60秒读懂世界！</title>
    <link href="http://zgtechnb666.github.io/2022/12/06/%E6%AF%8F%E5%A4%A960%E7%A7%92%E8%AF%BB%E6%87%82%E4%B8%96%E7%95%8C%EF%BC%81/"/>
    <id>http://zgtechnb666.github.io/2022/12/06/%E6%AF%8F%E5%A4%A960%E7%A7%92%E8%AF%BB%E6%87%82%E4%B8%96%E7%95%8C%EF%BC%81/</id>
    <published>2022-12-06T06:24:00.000Z</published>
    <updated>2022-12-06T06:25:24.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="每日新闻更新，早知天下事！"><a href="#每日新闻更新，早知天下事！" class="headerlink" title="每日新闻更新，早知天下事！"></a>每日新闻更新，早知天下事！</h1><p><img src="https://v2.alapi.cn/api/zaobao?token=i038Z9ZbgKYCO9eA&format=image" alt="60s-for-news"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;每日新闻更新，早知天下事！&quot;&gt;&lt;a href=&quot;#每日新闻更新，早知天下事！&quot; class=&quot;headerlink&quot; title=&quot;每日新闻更新，早知天下事！&quot;&gt;&lt;/a&gt;每日新闻更新，早知天下事！&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://v2.alapi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>freenom自动续费通知配置教程</title>
    <link href="http://zgtechnb666.github.io/2022/12/06/freenom%E8%87%AA%E5%8A%A8%E7%BB%AD%E8%B4%B9%E9%80%9A%E7%9F%A5%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <id>http://zgtechnb666.github.io/2022/12/06/freenom%E8%87%AA%E5%8A%A8%E7%BB%AD%E8%B4%B9%E9%80%9A%E7%9F%A5%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</id>
    <published>2022-12-06T03:27:28.000Z</published>
    <updated>2022-12-06T03:29:56.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p><a href="https://zgtechnb666.github.io/2022/12/06/freenom%E5%9F%9F%E5%90%8D%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9F%E6%95%99%E7%A8%8B/">上篇教程</a>教了大家如何使用docker为自己的freenom域名续费。这篇文章，我就教大家如何为这个项目配置通知。</p><h1 id="邮件送信"><a href="#邮件送信" class="headerlink" title="邮件送信"></a>邮件送信</h1><h2 id="Gmail"><a href="#Gmail" class="headerlink" title="Gmail"></a>Gmail</h2><p><strong>推荐打开浏览器隐私模式后再登录 gmail 进行设置，防止当你有多个 gmail 账户时无法跳到正确的设置地址。</strong></p><ol><li>在 <code>设置&gt;转发和POP/IMAP中</code>，勾选</li></ol><ul><li>对所有邮件启用 POP</li><li>启用 IMAP</li></ul><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/68747470733a2f2f73322e617831782e636f6d2f323032302f30312f33312f3133744b73672e706e67.png" alt="gamil" title="gamil"> </p><p>然后保存更改。<br>2. 开启两步验证<br>参考官方文档：<a href="https://support.google.com/accounts/answer/185839">开启两步验证</a><br>3. 配置使用应用专用密码登录邮箱<br>参考官方文档：<a href="https://support.google.com/mail/answer/185833?hl=zh-Hans">使用应用专用密码登录</a></p><p><strong>由于 Gmail 已不再支持“不安全的登录方式”，故目前只能使用账户加应&#96;用专用密码的方式登录。</strong></p><h2 id="QQ邮箱-96"><a href="#QQ邮箱-96" class="headerlink" title="QQ邮箱 &#96;"></a>QQ邮箱 &#96;</h2><p>在 <code>设置&gt;账户&gt;POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</code>下，开启 <code>POP3/SMTP服务</code>。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/68747470733a2f2f73322e617831782e636f6d2f323032302f30312f33312f313363494b412e706e67.png" alt="QQ邮箱" title="QQ邮箱"> </p><p>此时坑爹的QQ邮箱会要求你用手机发送一条短信给腾讯，发送完了点一下 <code>我已发送</code></p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/68747470733a2f2f73322e617831782e636f6d2f323032302f30312f33312f3133633476642e706e67.png" alt="QQ邮箱" title="QQ邮箱"> </p><p>然后你就能看到你的邮箱授权码了，使用邮箱账户加授权码即可登录，记下授权码</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/68747470733a2f2f73322e617831782e636f6d2f323032302f30312f33312f3133635462742e706e67.png" alt="QQ邮箱" title="QQ邮箱"><br><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/68747470733a2f2f73322e617831782e636f6d2f323032302f30312f33312f3133636f44492e706e67.png" alt="QQ邮箱" title="QQ邮箱"> </p><h2 id="163邮箱"><a href="#163邮箱" class="headerlink" title="163邮箱"></a>163邮箱</h2><p>在 <code>设置&gt;POP3/SMTP/IMAP</code> 下，开启 <code>POP3/SMTP服务和IMAP/SMTP服务</code> 并保存</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/68747470733a2f2f73322e617831782e636f6d2f323032302f30312f33312f3133574b5a6e2e706e67.png" alt="163邮箱" title="163邮箱"><br><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/68747470733a2f2f73322e617831782e636f6d2f323032302f30312f33312f3133575149302e706e67.png" alt="163邮箱" title="163邮箱"></p><p>现在点击侧边栏的 <code>客户端授权密码</code> ，并获取授权码，你看到画面可能和我不一样，因为我已经获取了授权码，所以只有 <code>重置授权码</code> 按钮 ，这里自己根据网站提示申请获取授权码，网易和腾讯一样恶心，需要你用手机给它发一条短信才能拿到授权码</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/68747470733a2f2f73322e617831782e636f6d2f323032302f30312f33312f3133574d61712e706e67.png" alt="163邮箱" title="163邮箱"></p><p>163 邮箱送信后，接收方如果没收到可以在垃圾邮件里面找一下。</p><p>上面的动作完成后，在.env文件中，将MAIL_USERNAME和MAIL_PASSWORD设置为你的邮箱和密码（或令牌），将TO设置为你的收信邮箱，然后将MAIL_ENABLE的值设为1以启用邮箱送信功能。</p><p>上面介绍了三种邮箱的设置方法，如果你不想使用邮件送信，将根目录下的.env文件中的MAIL_ENABLE的值改为0即可关闭邮件推送方式。</p><p>邮件 送信部分完。</p><h1 id="Telegram-Bot"><a href="#Telegram-Bot" class="headerlink" title="Telegram Bot"></a>Telegram Bot</h1><ol><li><p>将.env文件中的TELEGRAM_BOT_ENABLE的值改为1，即可启用 Telegram Bot 送信功能</p></li><li><p>在 Telegram 客户端中搜索 <code>@userinfobot</code>，并打开聊天窗口</p></li><li><p>发送 <code>/start</code> 给 <code>@userinfobot</code> 即可以获取自己的 Id，将.env文件中的 <code>TELEGRAM_CHAT_ID</code> 的值改为前面获取到的 Id<br>&#96;</p></li><li><p>在 Telegram 客户端中搜索 &#96;@BotFather，并打开聊天窗口</p></li><li><p>发送 <code>/newbot</code> 给 <code>@BotFather</code>，然后根据提示创建，创建完成后根据图示操作获取token</p></li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/666.png" alt="Telegram Bot" title="Telegram Bot"> </p><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-06%20105256.png" alt="最终效果" title="最终效果"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zgtechnb666.github.io/2022/12/06/freenom%E5%9F%9F%E5%</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>freenom域名自动续期教程</title>
    <link href="http://zgtechnb666.github.io/2022/12/06/freenom%E5%9F%9F%E5%90%8D%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9F%E6%95%99%E7%A8%8B/"/>
    <id>http://zgtechnb666.github.io/2022/12/06/freenom%E5%9F%9F%E5%90%8D%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9F%E6%95%99%E7%A8%8B/</id>
    <published>2022-12-06T02:56:45.000Z</published>
    <updated>2022-12-06T03:04:21.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>  当初薅了freenom的几个域名（<del>肯定不是55个</del>），但是只有一年有效期，到期了就要手动续期，很费劲，于是找到了这个dokcer镜像，能够自动续期freenom的域名，亲测可用。</p><p><a href="https://github.com/luolongfei/freenom">luolongfei&#x2F;freenom</a></p><h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><p>如果不想看文字教程的话，可以观看<a href="https://www.bilibili.com/video/BV1HF411v7d3/">这篇视频</a></p><ol><li>安装 Docker<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo yum install -<span class="hljs-keyword">y</span> docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io<br></code></pre></td></tr></table></figure></li><li>启动 Docker 并设置开机自启<figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start docker<br><span class="hljs-params">system</span>ctl enable docker<br></code></pre></td></tr></table></figure></li><li>用 Docker 创建并启动容器<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -d --name freenom --restart always -v $(<span class="hljs-built_in">pwd</span>):/conf -v $(<span class="hljs-built_in">pwd</span>)/logs:/app/logs luolongfei/freenom</span><br></code></pre></td></tr></table></figure>或者，如果你想自定义脚本执行时间<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -d --name freenom --restart always -v $(<span class="hljs-built_in">pwd</span>):/conf -v $(<span class="hljs-built_in">pwd</span>)/logs:/app/logs -e RUN_AT=<span class="hljs-string">&quot;11:24&quot;</span> luolongfei/freenom</span><br></code></pre></td></tr></table></figure>上面这条命令只比上上条命令多了个 <code>-e RUN_AT=&quot;11:24&quot;</code> ，其中 <code>11:24</code> 表示在北京时间每天的 <code>11:24</code> 执行续期任务，你可以自定义这个时间。 这里的 <code>RUN_AT</code> 参数同时也支持 CRON 命令里的时间形式，比如， <code>-e RUN_AT=&quot;9 11 * * *&quot;</code>，表示每天北京时间 11:09 执行续期任务， 如果你不想每天执行任务，只想隔几天执行，只用修改 <code>RUN_AT</code> 的值即可。</li></ol><p><strong>注意：不推荐自定义脚本执行时间。因为你可能跟很多人定义的是同一个时间点，这样可能导致所有人都是同一时间向 Freenom 的服务器发起请求， 使得 Freenom 无法稳定提供服务。而如果你不自定义时间，程序会自动指定北京时间</strong></p><h1 id="env-文件中部分配置项的含义"><a href="#env-文件中部分配置项的含义" class="headerlink" title=".env 文件中部分配置项的含义"></a>.env 文件中部分配置项的含义</h1><table><thead><tr><th align="center">变量名</th><th align="center">含义</th><th align="center">是否必须</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">FREENOM_USERNAME</td><td align="center">Freenom 账户</td><td align="center">是</td><td align="center">只支持邮箱账户，如果你是使用第三方社交账户登录的用户，请在 Freenom 管理页面绑定邮箱，绑定后即可使用邮箱账户登录</td></tr><tr><td align="center">FREENOM_PASSWORD</td><td align="center">Freenom 密码</td><td align="center">是</td><td align="center">只支持邮箱账户，如果你是使用第三方社交账户登录的用户，请在 Freenom 管理页面绑定邮箱，绑定后即可使用邮箱账户登录</td></tr><tr><td align="center">MULTIPLE_ACCOUNTS</td><td align="center">多账户支持</td><td align="center">否</td><td align="center">多个账户和密码的格式必须是</td></tr><tr><td align="center">MAIL_USERNAME</td><td align="center">机器人邮箱账户</td><td align="center">否</td><td align="center">支持Gmail、QQ邮箱、163邮箱以及Outlook邮箱</td></tr><tr><td align="center">MAIL_PASSWORD</td><td align="center">机器人邮箱密码</td><td align="center">否</td><td align="center">Gmail填应用专用密码，QQ邮箱或163邮箱填授权码</td></tr><tr><td align="center">TO</td><td align="center">接收通知的邮箱</td><td align="center">否</td><td align="center">你自己最常用的邮箱，用来接收机器人邮箱发出的域名相关邮件</td></tr><tr><td align="center">MAIL_ENABLE</td><td align="center">是否启用邮件推送功能</td><td align="center">否</td><td align="center">1：启用 0：不启用 默认不启用，如果设为1，启用邮件推送功能，则上面的MAIL_USERNAME、MAIL_PASSWORD、TO变量变为必填项</td></tr><tr><td align="center">TELEGRAM_CHAT_ID</td><td align="center">你的chat_id</td><td align="center">否</td><td align="center">通过发送&#x2F;start给@userinfobot可以获取自己的id</td></tr><tr><td align="center">TELEGRAM_BOT_TOKEN</td><td align="center">你的Telegram bot的token</td><td align="center">否</td><td align="center">-</td></tr><tr><td align="center">TELEGRAM_BOT_ENABLE</td><td align="center">是否启用Telegram Bot推送功能</td><td align="center">否</td><td align="center">1：启用 0：不启用 默认不启用，如果设为1，则必须设置上面的TELEGRAM_CHAT_ID和TELEGRAM_BOT_TOKEN变量</td></tr><tr><td align="center">NOTICE_FREQ</td><td align="center">通知频率</td><td align="center">否</td><td align="center">0：仅当有续期操作的时候  1：每次执行</td></tr><tr><td align="center">NEZHA_SERVER</td><td align="center">哪吒探针服务端的 IP 或域名</td><td align="center">否</td><td align="center">-</td></tr><tr><td align="center">NEZHA_PORT</td><td align="center">哪吒探针服务端的端口</td><td align="center">否</td><td align="center">-</td></tr><tr><td align="center">NEZHA_KEY</td><td align="center">哪吒探针客户端专用 Key</td><td align="center">否</td><td align="center">-</td></tr></tbody></table><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>至此，你的自动续期容器就跑起来了，执行 <code>ls -a</code> 后你就可以看到在你的当前目录下，有一个 <code>.env</code> 文件和一个 <code>logs</code> 目录，<code>logs</code> 目录里面存放的是程序日志， 而 <code>.env</code> 则是配置文件，现在直接执行 <code>vim .env</code> 将 <code>.env</code> 文件里的所有配置项改为你自己的并保存即可。然后重启容器，如果配置正确的话，便很快可以收到相关邮件。</p><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-06%20105256.png" alt="最终效果" title="最终效果"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;  当初薅了freenom的几个域名（&lt;del&gt;肯定不是55个&lt;/del&gt;），但是只有一年有效期，到期了就要手动续期，很费劲，于是找到了这个</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>gh-proxy 代理下载Github 仓库</title>
    <link href="http://zgtechnb666.github.io/2022/12/05/gh-proxy%20%E4%BB%A3%E7%90%86%E4%B8%8B%E8%BD%BDGithub%E4%BB%93%E5%BA%93/"/>
    <id>http://zgtechnb666.github.io/2022/12/05/gh-proxy%20%E4%BB%A3%E7%90%86%E4%B8%8B%E8%BD%BDGithub%E4%BB%93%E5%BA%93/</id>
    <published>2022-12-05T12:54:19.000Z</published>
    <updated>2022-12-05T12:59:22.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>在国内网络环境下使用 GitHub 相关服务体验很差,其域名 <strong>github.com</strong> 和仓库文件直链域名 <strong>raw.githubusercontent.com</strong> 被 DNS 污染,除了修改 hosts 解决以外,还可以使用 <strong>gh-proxy</strong> 来代理访问。</p><blockquote><p>gh-proxy 是一款 github release、archive以及项目文件的加速项目，支持直接在终端 git clone ,也可以在 web 端代理下载 github 以及 raw.githubusercontent.com 等文件.</p></blockquote><p><a href="https://github.com/hunshcn/gh-proxy">hunshcn&#x2F;gh-proxy</a></p><p><strong>项目默认使用 jsdelivr 和 cnpmjs 的镜像,但有时还是会被污染,本站代理已关闭镜像,直接以阿里云服务器代理访问,体验更好.</strong></p><h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><p>Web 端直接粘贴 Github 项目或文件直链点击下载即可.<br>也支持wget、curl等需要直链方式的软件,仅需在直链之前加上 <code>https://gh.j8.market/</code> 即可.<br><strong>大量使用请自行部署，以上域名仅为演示使用。</strong><br>脚本中可以设置变量,批量在直链前加入代理变量.</p><p><strong>不支持SSH的方式 Clone 仓库</strong></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="cf-worker版本部署"><a href="#cf-worker版本部署" class="headerlink" title="cf worker版本部署"></a>cf worker版本部署</h2><p>进入 <a href="https://workers.cloudflare.com/">clouflare Wokers</a> ,注册，登陆，<code>Start building</code>，取一个子域名，<code>Create a Worker</code>。<br>复制 下方代码 到左侧代码框，<code>Save and deploy</code>。如果正常，右侧应显示首页。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * static files (404.html, sw.js, conf.js)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ASSET_URL</span> = <span class="hljs-string">&#x27;https://hunshcn.github.io/gh-proxy/&#x27;</span><br><span class="hljs-comment">// 前缀，如果自定义路由为example.com/gh/*，将PREFIX改为 &#x27;/gh/&#x27;，注意，少一个杠都会错！</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PREFIX</span> = <span class="hljs-string">&#x27;/&#x27;</span><br><span class="hljs-comment">// 分支文件使用jsDelivr镜像的开关，0为关闭，默认关闭</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Config</span> = &#123;<br>    <span class="hljs-attr">jsdelivr</span>: <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">const</span> whiteList = [] <span class="hljs-comment">// 白名单，路径里面有包含字符的才会通过，e.g. [&#x27;/username/&#x27;]</span><br><br><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">RequestInit</span>&#125; */</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PREFLIGHT_INIT</span> = &#123;<br>    <span class="hljs-attr">status</span>: <span class="hljs-number">204</span>,<br>    <span class="hljs-attr">headers</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(&#123;<br>        <span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span>,<br>        <span class="hljs-string">&#x27;access-control-allow-methods&#x27;</span>: <span class="hljs-string">&#x27;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#x27;</span>,<br>        <span class="hljs-string">&#x27;access-control-max-age&#x27;</span>: <span class="hljs-string">&#x27;1728000&#x27;</span>,<br>    &#125;),<br>&#125;<br><br><br><span class="hljs-keyword">const</span> exp1 = <span class="hljs-regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:releases|archive)\/.*$/i</span><br><span class="hljs-keyword">const</span> exp2 = <span class="hljs-regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:blob|raw)\/.*$/i</span><br><span class="hljs-keyword">const</span> exp3 = <span class="hljs-regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/(?:info|git-).*$/i</span><br><span class="hljs-keyword">const</span> exp4 = <span class="hljs-regexp">/^(?:https?:\/\/)?raw\.(?:githubusercontent|github)\.com\/.+?\/.+?\/.+?\/.+$/i</span><br><span class="hljs-keyword">const</span> exp5 = <span class="hljs-regexp">/^(?:https?:\/\/)?gist\.(?:githubusercontent|github)\.com\/.+?\/.+?\/.+$/i</span><br><span class="hljs-keyword">const</span> exp6 = <span class="hljs-regexp">/^(?:https?:\/\/)?github\.com\/.+?\/.+?\/tags.*$/i</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">any</span>&#125; <span class="hljs-variable">body</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">status</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object&lt;string, string&gt;</span>&#125; <span class="hljs-variable">headers</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeRes</span>(<span class="hljs-params">body, status = <span class="hljs-number">200</span>, headers = &#123;&#125;</span>) &#123;<br>    headers[<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>] = <span class="hljs-string">&#x27;*&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(body, &#123;status, headers&#125;)<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">urlStr</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">newUrl</span>(<span class="hljs-params">urlStr</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(urlStr)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> ret = <span class="hljs-title function_">fetchHandler</span>(e)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-title function_">makeRes</span>(<span class="hljs-string">&#x27;cfworker error:\n&#x27;</span> + err.<span class="hljs-property">stack</span>, <span class="hljs-number">502</span>))<br>    e.<span class="hljs-title function_">respondWith</span>(ret)<br>&#125;)<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkUrl</span>(<span class="hljs-params">u</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> [exp1, exp2, exp3, exp4, exp5, exp6]) &#123;<br>        <span class="hljs-keyword">if</span> (u.<span class="hljs-title function_">search</span>(i) === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">FetchEvent</span>&#125; <span class="hljs-variable">e</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchHandler</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">const</span> req = e.<span class="hljs-property">request</span><br>    <span class="hljs-keyword">const</span> urlStr = req.<span class="hljs-property">url</span><br>    <span class="hljs-keyword">const</span> urlObj = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(urlStr)<br>    <span class="hljs-keyword">let</span> path = urlObj.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;q&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (path) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;https://&#x27;</span> + urlObj.<span class="hljs-property">host</span> + <span class="hljs-variable constant_">PREFIX</span> + path, <span class="hljs-number">301</span>)<br>    &#125;<br>    <span class="hljs-comment">// cfworker 会把路径中的 `//` 合并成 `/`</span><br>    path = urlObj.<span class="hljs-property">href</span>.<span class="hljs-title function_">substr</span>(urlObj.<span class="hljs-property">origin</span>.<span class="hljs-property">length</span> + <span class="hljs-variable constant_">PREFIX</span>.<span class="hljs-property">length</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^https?:\/+/</span>, <span class="hljs-string">&#x27;https://&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (path.<span class="hljs-title function_">search</span>(exp1) === <span class="hljs-number">0</span> || path.<span class="hljs-title function_">search</span>(exp5) === <span class="hljs-number">0</span> || path.<span class="hljs-title function_">search</span>(exp6) === <span class="hljs-number">0</span> || path.<span class="hljs-title function_">search</span>(exp3) === <span class="hljs-number">0</span> || path.<span class="hljs-title function_">search</span>(exp4) === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">httpHandler</span>(req, path)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (path.<span class="hljs-title function_">search</span>(exp2) === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Config</span>.<span class="hljs-property">jsdelivr</span>) &#123;<br>            <span class="hljs-keyword">const</span> newUrl = path.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;/blob/&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^(?:https?:\/\/)?github\.com/</span>, <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(newUrl, <span class="hljs-number">302</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            path = path.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;/blob/&#x27;</span>, <span class="hljs-string">&#x27;/raw/&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">httpHandler</span>(req, path)<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (path.<span class="hljs-title function_">search</span>(exp4) === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">const</span> newUrl = path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(?&lt;=com\/.+?\/.+?)\/(.+?\/)/</span>, <span class="hljs-string">&#x27;@$1&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^(?:https?:\/\/)?raw\.(?:githubusercontent|github)\.com/</span>, <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">redirect</span>(newUrl, <span class="hljs-number">302</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-variable constant_">ASSET_URL</span> + path)<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Request</span>&#125; <span class="hljs-variable">req</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">pathname</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">httpHandler</span>(<span class="hljs-params">req, pathname</span>) &#123;<br>    <span class="hljs-keyword">const</span> reqHdrRaw = req.<span class="hljs-property">headers</span><br><br>    <span class="hljs-comment">// preflight</span><br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> === <span class="hljs-string">&#x27;OPTIONS&#x27;</span> &amp;&amp;<br>        reqHdrRaw.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;access-control-request-headers&#x27;</span>)<br>    ) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-literal">null</span>, <span class="hljs-variable constant_">PREFLIGHT_INIT</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> reqHdrNew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(reqHdrRaw)<br><br>    <span class="hljs-keyword">let</span> urlStr = pathname<br>    <span class="hljs-keyword">let</span> flag = !<span class="hljs-title class_">Boolean</span>(whiteList.<span class="hljs-property">length</span>)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> whiteList) &#123;<br>        <span class="hljs-keyword">if</span> (urlStr.<span class="hljs-title function_">includes</span>(i)) &#123;<br>            flag = <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">break</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!flag) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&quot;blocked&quot;</span>, &#123;<span class="hljs-attr">status</span>: <span class="hljs-number">403</span>&#125;)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (urlStr.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;github&#x27;</span>)) &#123;<br>        urlStr = <span class="hljs-string">&#x27;https://&#x27;</span> + urlStr<br>    &#125;<br>    <span class="hljs-keyword">const</span> urlObj = <span class="hljs-title function_">newUrl</span>(urlStr)<br><br>    <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">RequestInit</span>&#125; */</span><br>    <span class="hljs-keyword">const</span> reqInit = &#123;<br>        <span class="hljs-attr">method</span>: req.<span class="hljs-property">method</span>,<br>        <span class="hljs-attr">headers</span>: reqHdrNew,<br>        <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;manual&#x27;</span>,<br>        <span class="hljs-attr">body</span>: req.<span class="hljs-property">body</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">proxy</span>(urlObj, reqInit)<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">URL</span>&#125; <span class="hljs-variable">urlObj</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">RequestInit</span>&#125; <span class="hljs-variable">reqInit</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">proxy</span>(<span class="hljs-params">urlObj, reqInit</span>) &#123;<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(urlObj.<span class="hljs-property">href</span>, reqInit)<br>    <span class="hljs-keyword">const</span> resHdrOld = res.<span class="hljs-property">headers</span><br>    <span class="hljs-keyword">const</span> resHdrNew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(resHdrOld)<br><br>    <span class="hljs-keyword">const</span> status = res.<span class="hljs-property">status</span><br><br>    <span class="hljs-keyword">if</span> (resHdrNew.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;location&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">let</span> _location = resHdrNew.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;location&#x27;</span>)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">checkUrl</span>(_location))<br>            resHdrNew.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;location&#x27;</span>, <span class="hljs-variable constant_">PREFIX</span> + _location)<br>        <span class="hljs-keyword">else</span> &#123;<br>            reqInit.<span class="hljs-property">redirect</span> = <span class="hljs-string">&#x27;follow&#x27;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">proxy</span>(<span class="hljs-title function_">newUrl</span>(_location), reqInit)<br>        &#125;<br>    &#125;<br>    resHdrNew.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;access-control-expose-headers&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>    resHdrNew.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br><br>    resHdrNew.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;content-security-policy&#x27;</span>)<br>    resHdrNew.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;content-security-policy-report-only&#x27;</span>)<br>    resHdrNew.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;clear-site-data&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(res.<span class="hljs-property">body</span>, &#123;<br>        status,<br>        <span class="hljs-attr">headers</span>: resHdrNew,<br>    &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>ASSET_URL</code>是静态资源的url（实际上就是现在显示出来的那个输入框单页面）</p><p><code>PREFIX</code>是前缀，默认（根路径情况为”&#x2F;“），如果自定义路由为example.com&#x2F;gh&#x2F;*，请将PREFIX改为 ‘&#x2F;gh&#x2F;‘，注意，少一个杠都会错！</p><h2 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h2><p>在ssh终端输入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -d <span class="hljs-attribute">--name</span>=<span class="hljs-string">&quot;gh-proxy-py&quot;</span> \<br>  -p 0.0.0.0:80:80 \<br>  <span class="hljs-attribute">--restart</span>=always \<br>  hunsh/gh-proxy-py:latest<br></code></pre></td></tr></table></figure><p>第二行中的第一个80是你要暴露出去的端口</p><h2 id="Python版本部署"><a href="#Python版本部署" class="headerlink" title="Python版本部署"></a>Python版本部署</h2><ol><li>安装依赖（请使用python3）<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> flask requests<br></code></pre></td></tr></table></figure></li><li>按需求修改 <code>app/main.py</code> 的前几项配置</li></ol><p><strong>注意: 可能需要在return Response前加两行</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Transfer-Encoding&#x27;</span> in headers:<br>    headers.<span class="hljs-built_in">pop</span>(<span class="hljs-string">&#x27;Transfer-Encoding&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>python版本的机器如果无法正常访问github.io会启动报错，请自行修改静态文件url</strong></p><p>python版本默认走服务器（2021.3.27更新）</p><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="https://images.zgtech.tech/?/images/2022/11/20/OGqrCeLqRB/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-20%20193552.png" alt="最终效果" title="最终效果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;在国内网络环境下使用 GitHub 相关服务体验很差,其域名 &lt;strong&gt;github.com&lt;/strong&gt; 和仓库文件直链域名 &lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>画不好吃面少女的 AI，让二次元怒了</title>
    <link href="http://zgtechnb666.github.io/2022/12/05/%E7%94%BB%E4%B8%8D%E5%A5%BD%E5%90%83%E9%9D%A2%E5%B0%91%E5%A5%B3%E7%9A%84%20AI%EF%BC%8C%E8%AE%A9%E4%BA%8C%E6%AC%A1%E5%85%83%E6%80%92%E4%BA%86/"/>
    <id>http://zgtechnb666.github.io/2022/12/05/%E7%94%BB%E4%B8%8D%E5%A5%BD%E5%90%83%E9%9D%A2%E5%B0%91%E5%A5%B3%E7%9A%84%20AI%EF%BC%8C%E8%AE%A9%E4%BA%8C%E6%AC%A1%E5%85%83%E6%80%92%E4%BA%86/</id>
    <published>2022-12-05T12:48:38.000Z</published>
    <updated>2022-12-05T12:50:37.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>今年是 AI 成绩斐然的一年，写文章、做视频、玩音乐、当画家，你给资料它是真学。<br>今年也是许多艺术从业者瑟瑟发抖的一年，人类的双拳或四手，都难敌 AI 的进步神速。<br>现在，压力给到了漫画家这边，<strong>二次元们</strong>不干了。</p><h1 id="AI-模仿过世艺术家，犯了众怒"><a href="#AI-模仿过世艺术家，犯了众怒" class="headerlink" title="AI 模仿过世艺术家，犯了众怒"></a>AI 模仿过世艺术家，犯了众怒</h1><p>10 月 3 日，<strong>韩国著名漫画家、插画家金政基</strong>意外去世，他因现场作画不打底稿、直接画出巨大而复杂的场景被称为「人肉打印机」，曾为<strong>漫威</strong>绘制《漫威英雄大乱斗》。<br><img src="http://zigeltd.eu.org/?/images/2022/11/05/Lh4BCl1pz7/marvel.jpg" alt="1" title="金政基的作品"><br><img src="http://zigeltd.eu.org/?/images/2022/11/05/8TiarZr1gb/hype1.jpg" alt="2" title="金政基的作品"><br>在电脑绘画大行其道的今天，<strong>金政基</strong>依然坚持着传统的<strong>手绘</strong>方式：</p><blockquote><p>我一直坚持手绘，对徒手创作更为熟练，相信用自己的手和笔能更好地表现出作品的味道。有时间的话也想学习电脑作画，尝试更多的作画方法，不过如果依靠电脑的话，作品会有一种标准化的感觉，所以自己多少有些<strong>回避心态</strong>。</p></blockquote><p>紧接着在 10 月 7 日，热衷于程序生成和 AI 艺术的推特用户**@BG_5you<strong>，将他的作品喂给 AI 模型 <strong>Stable Diffusion</strong>，讽刺意味拉满。<br>就像我们司空见惯的那样，</strong>@BG_5you** 未经任何许可，只是 Google 了金政基的作品而已。<br><img src="http://zigeltd.eu.org/?/images/2022/11/05/LyZn6ueGWJ/ai1.jpg" alt="3" title="@BG_5you 的 AI 生成艺术."><br><img src="http://zigeltd.eu.org/?/images/2022/11/05/R2SXqKMiUB/ai2.jpg" alt="4" title="@BG_5you 的 AI 生成艺术."><br>最终效果如何？第一眼似乎挺逼真，细看有些<strong>浮皮潦草</strong>。<br>不出意料的是，**@BG_5you** 的反对者众多，漫画家 <strong>@Dave Scheidt</strong> 写道：</p><blockquote><p>金政基离开我们还不到一周，AI 兄弟们已经在「复制」他的风格并希望获得荣誉。这是秃鹫，也是没有骨气和天赋的失败者。</p></blockquote><p><strong>@BG_5you</strong> 当然也看到了网友的批评，他回应道，他喜欢 AI 技术，但即使 AI 生成艺术是完美的，也无法取代艺术家的思想和画技。这只是探索艺术家风格的一种<strong>新方式</strong>、一个<strong>被分享给大众的玩具</strong>，不需要与一生才能挣得的才华比肩。<br><img src="http://zigeltd.eu.org/?/images/2022/11/05/trgd8eAEtN/jin2.jpg" alt="5" title="金政基作画场景"><br>看起来是把姿态低到了尘埃里，还不忘致敬艺术家，但字里行间又是轻慢的。<br>金政基本人是<strong>刻苦</strong>的<strong>天才画家</strong>，高中时一天 12 个小时都在画，成名后每天平均也画 10 小时。有网友指出，将他人的艺术视为「只是一个玩具」就是问题所在：「他的作品被歪曲了，五年后的孩子会看见这个狗屎，而不是他的真迹。」<br>另一位漫画家 <strong>@Kori Michele</strong> 也忍不住反驳：</p><blockquote><p>艺术家不仅仅是一种「风格」。他们不是产品，而是一个个呼吸着、体验着的人，学习、感受和成长，并创造艺术。@BG_5you 的 AI 模型，代表了看待艺术家的方式里最糟糕的一种。</p></blockquote><p>AI 生成器并非致敬，而是对金政基作品的盗窃，这样的观点充斥着评论区，@BG_5you 甚至自称收到了金政基忠实粉丝的死亡威胁。<br><img src="http://zigeltd.eu.org/?/images/2022/11/05/gZfmArIIlO/ai3.jpg" alt="6" title="@BG_5you 的 AI 生成艺术."><br><img src="http://zigeltd.eu.org/?/images/2022/11/05/SodLYGmtNU/ai4.jpg" alt="7" title="@BG_5you 的 AI 生成艺术."><br>他没有赢，但 AI 模型 <strong>Stable Diffusion</strong> 又出圈了一次。Stable Diffusion 背后的公司 <strong>Stability AI</strong>，在 10 月中旬筹得了 1.01 亿美元，估值约为 10 亿美元。<br>Stable Diffusion 和 Dall-E 等竞争对手有一点不同：它是开源的，所有代码都在 GitHub 上公开，任何人都可以使用，前提是遵循原项目采用的 <strong>CreativeML Open RAIL-M 许可证</strong>。<br><img src="https://s3.ifanr.com/wp-content/uploads/2022/11/stable2.jpg!720" alt="8"><br>你可以按你喜欢的方式使用它，从执行文字生成图片的任务，到开发独立的应用或服务。<br>这意味着，不需要<strong>测试版邀请或订阅</strong>，工程师可以在任何图像数据集上训练模型，制作出想要的艺术风格，涉及犯罪、诽谤、骚扰等的内容除外。<br><strong>Stability AI 顾问 Aemish Shah</strong> 曾经说道：「我们很高兴能够支持 AI 的民主化。」开源的属性，既让 AI 模型不再是少数人的游戏，也是 <strong>AI 艺术爆火</strong>的基础。<br>但对于艺术家们来说，它的普及或许不是个好消息，被侵权就是一个逃不过的问题。<br><img src="https://s3.ifanr.com/wp-content/uploads/2022/11/wiki.jpg!720" alt="9" title="同一主题、不同提示词下 Stable Diffusion 的输出"><br>由于艺术风格和构图不受著作权保护，因此使用 <strong>Stable Diffusion</strong> 生成的图像，<a href="https://automaton-media.com/articles/newsjp/20220824-216074/">往往不被视为侵犯「视觉相似作品」的著作权</a>。<br>但如果涉及真人或者品牌标识，那么<a href="https://m.wiki.zgtech.top/zh-cn/Stable_Diffusion">人格权或知识产权仍然受到保护</a>。</p><p>根据 Stability 协议，Stable Diffusion 生成的图片，<a href="https://maoxianqiu.feishu.cn/wiki/wikcnyPXXfk7htBiZs7HUng1nDY">其版权归属于创作者经济集体</a>，而不归属于任何个人和公司，但是，你可以将你生成的图片用于商业或非商业用途。金政基粉丝的愤怒，或许更能令人共情了。</p><h1 id="AI-也有做不到的事"><a href="#AI-也有做不到的事" class="headerlink" title="AI 也有做不到的事"></a>AI 也有做不到的事</h1><p>或许能让人心下稍安，AI 在二次元也有几座翻不过去的高山。<br>在反对 AI 模型时，漫画家 <strong>@Kori Michele</strong> 指出：</p><blockquote><p>我无法让 AI 资本主义者明白，这不是要抢走我们的工作，或让艺术更「有效」和「便宜」（这些都是会发生的事情）。真正有价值的是你通过创造事物的体验，让世界变得更美好、更丰富——这些东西是你的双手、你的心、你的历史、你的社区和你的未来的独特成果。</p></blockquote><p>所谓「我手写我心」，画本身是一个人的故事，创造它们的是一个经历某事的人。<br>AI 画不好一些画，也是因为见识得少了。<br><img src="http://zigeltd.eu.org/?/images/2022/11/05/UfvT8Z6nIw/ai7.jpg" alt="10"><br>在日本画师圈，有人总结了三大 AI 画图难题：<strong>萨菲罗斯游泳</strong>、<strong>樋口円香吃拉面</strong>、<strong>哭泣的美少女吃蛋糕</strong>。<br>听起来不难想象的场景，AI 把它们画成了：<strong>萨菲罗斯站在水上</strong>、<strong>樋口円香手抓拉面</strong>、<strong>美少女变成蛋糕</strong>。<br><img src="http://zigeltd.eu.org/?/images/2022/11/05/vV3lW5KFh6/togetter.jpg" alt="11" title="樋口円香手抓拉面"><br><strong>AI 理解岔了</strong>，主要还是因为学习资料不够或者素材本身有偏差。<br>比如<strong>手抓拉面</strong>，很可能是因为 AI 画出了像是面的东西，却<strong>不知道</strong>面要用筷子吃，不只是樋口円香，AI 画其他角色吃面也同样会用手抓。<br>不过，AI 画不好是一回事，<a href="https://new.qq.com/rain/a/20221021A08LBL00">不代表 AI 完全不会画</a>，也有少数成功的例子。尽管拉面和筷子对 AI 来说很抽象，多试试或者微调，「幸存者偏差」就出现了。<br><img src="http://zigeltd.eu.org/?/images/2022/11/05/bW6ifbfdkg/ai12.jpg" alt="12"><br>至少目前，AI 还是一个勤勤恳恳的好学生，为了达到人类的期望，离不开精心的素材和耐心的指导。<br>比如 <a href="https://mp.weixin.qq.com/s/6WYXH-D4zL9kOA7pVo1afw">6pen 等 AI 生成艺术平台</a>，要求用户「<strong>描述清晰明确，包含画面中出现的物体和他们的信息，避免和画面无关的词</strong>」，并且「合理和巧妙地使用各种关键词，包括风格修饰、画面类型等」。<br><img src="http://zigeltd.eu.org/?/images/2022/11/05/5S7feNE06Q/ai13.jpg" alt="13" title="AI 艺术获奖"><br><strong>AI 在二次元的得意和碰壁也说明</strong>，人和 AI 的关系在微妙地变化。<br>对 AI 轻而易举的事情，人脑很难解决，现阶段的 AI 算得上是速成的画工，但<strong>人类想迈入艺术门槛并不那么容易</strong>。<br>反过来，人脑可以轻松完成的事，对于 AI 来说并非如此，前几年是怎么分辨狗或者猫，现在是怎么分清筷子和拉面。<strong>让 AI 创作真正成立，暂时还离不开人之为人的逻辑</strong>。<br>参考文献：</p><ul><li><a href="https://futurism.com/the-byte/anime-manga-fans-ai-generated">ANIME FANS IN JAPAN ARE NOT HAPPY WITH AI-GENERATED MANGA</a></li><li><a href="https://mp.weixin.qq.com/s/UXGi4LdW6N9PQqw3aMegqA">为什么AI画不了美少女吃面？</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;今年是 AI 成绩斐然的一年，写文章、做视频、玩音乐、当画家，你给资料它是真学。&lt;br&gt;今年也是许多艺术从业者瑟瑟发抖的一年，人类的双拳或四</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>原神私服搭建教程</title>
    <link href="http://zgtechnb666.github.io/2022/12/05/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>http://zgtechnb666.github.io/2022/12/05/%E5%8E%9F%E7%A5%9E%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</id>
    <published>2022-12-05T11:00:19.000Z</published>
    <updated>2022-12-05T11:27:58.294Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文仅供学习交流，严禁用于商业用途，侵权请<a href="mailto:zigenb666@gamil.com">联系我</a>删除</strong></p><p><strong>本文所需文件附于文末，请自取</strong></p><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>本文使用的是3.2的服务端进行搭建示范。</p><p>如果你是小白，请在进行环境安装之前，重启一次电脑，把后台奇奇怪怪的软件关掉（新服务器忽略）。</p><p><code>关于本机和服务器的区别，我会在文章之中注明区别（没有标注的都需要操作），请关注好每一个字。</code></p><p>碰到问题请发布评论</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p><strong>Q1:我只想玩，不想搭建！</strong><br><strong>答：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-number">1.</span>修改客户端文件<br>下载补丁：文末文件/客户端/<span class="hljs-number">3.</span>x-x服-<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserAssembly</span>.</span></span>zip<br>解压后得到 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserAssembly</span>.</span></span>dll<br>打开官服路径:Genshin Impact Game\YuanShen_Data\Native<br>官服路径下自带一个 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserAssembly</span>.</span></span>dll <br>把他重命名为：UserAssembly-官服.dll<br>重命名的目的是为了备份 没有官服游玩需求可以直接覆盖<br>把补丁包里面解压的 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserAssembly</span>.</span></span>dll放到此路径<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">2</span>.下载代理：文末文件\代理软件\mhy代理转向<br>下载完成 解压 以管理员方式打开mhy代理转向<br>下面地址输入进去<br>gc<span class="hljs-selector-class">.rainkavik</span><span class="hljs-selector-class">.com</span>:<span class="hljs-number">320</span><br>下方代理端口留空！！！！！！！！！<br></code></pre></td></tr></table></figure><p><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.1v8r5321vsqo.webp" alt="代理设置示范图" title="代理设置示范图"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">进入游戏后记得关闭代理，否则电脑会出现无网络情况，服务器压力也大~！<br><br>指令搭配Tools指令箱使用 下载路径：文末文件\其他\GrasscutterTools-<span class="hljs-built_in">v1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">6</span>.exe<br></code></pre></td></tr></table></figure><p><strong>Q2：如何传送？</strong><br><strong>答：</strong>用鱼钩（最后一个图标）在地图上标记一个点位并点击确认即可传送至目标上空；在名称填写数字可更改传送高度。<br><strong>Q3：游戏指令</strong><br><strong>答：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">推荐使用 Grasscutter Tools工具箱 (仅 Win) 或 GrasscutterTools(网页版) 等生成指令<br>游戏登陆后默认有一个名为 Server 的好友，此为游戏控制台，可向其发送指令<br>游戏内 Server好友输入示例：/give all<br>run.bat运行窗口输入示例：give @<span class="hljs-number">10001</span> all<br>更多指令请使用 GrasscutterTools工具箱查看<br>如果你是手机党玩家，不清楚指令，游玩别人的服务器，这里推荐两条指令<br><span class="hljs-number">1</span>.获得所有物品 /give all<br><span class="hljs-number">2</span>.获取毕业圣遗物 /give <span class="hljs-number">76524</span> lv<span class="hljs-number">20 10001</span> <span class="hljs-number">999002</span> <span class="hljs-number">999001</span> <span class="hljs-number">201062,100</span> <span class="hljs-number">201091,100</span> <span class="hljs-number">989001,2</span> <span class="hljs-number">301241,120</span><br></code></pre></td></tr></table></figure><h1 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">下载安装jdk和mongodb：<br>文件下载路径：文末文件/环境<br>完整文件名：jdk-<span class="hljs-number">17.0</span>.<span class="hljs-number">2</span>_windows-x64_bin<span class="hljs-selector-class">.exe</span> <br>完整文件名：mongodb-windows-x86_64-<span class="hljs-number">5.0</span>.<span class="hljs-number">8</span><span class="hljs-built_in">-</span>(仅限win10及以上使用)<span class="hljs-selector-class">.msi</span> <br></code></pre></td></tr></table></figure><p>1.网盘路径下有两个 <code>mongodb</code>，根据自己的系统版本下载对应版本。<br>2.如果你是小白，请勿更改任何设定。<br><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.271q31c0yo5c.webp" alt="环境所需软件" title="环境所需软件"></p><h2 id="服务端下载"><a href="#服务端下载" class="headerlink" title="服务端下载"></a>服务端下载</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">文件下载路径：文末文件/服务端/full-grasscutter<span class="hljs-number">-3.</span>x-#####_RainKavik.zip<br></code></pre></td></tr></table></figure><p><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.3f2ln4ix4q40.webp" alt="服务器下载路径" title="服务器下载路径"></p><h2 id="运行服务端"><a href="#运行服务端" class="headerlink" title="运行服务端"></a>运行服务端</h2><p><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.6aafopc22eo0.webp" alt="服务端" title="服务端"><br>下载完解压得到下列文件<br><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.3ppfg9y8kba0.webp" alt="所得文件" title="所得文件"><br>修改config.json(本地跳过，服务器和局域网必须更改)</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm">必改：<span class="hljs-string">&quot;server-accessAddress&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>必改：<span class="hljs-string">&quot;game-accessAddress&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>两个 <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>，更改为服务器公网<span class="hljs-built_in">IP</span>或者局域网IPV4地址<br><span class="hljs-symbol">IPv4</span>地址获取：任务管理器-性能-以太网（WIFI）-右下角IPV4<br>修改完成切记保存关闭<br></code></pre></td></tr></table></figure><p><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.676a9pezh880.webp" alt="修改config.json" title="修改config.json"><br>运行 <code>run.bat</code> ，显示 <code>加载完成！输入 &quot;help&quot; 查看命令列表</code> 即代表开服成功，显示其他请看常见问题。</p><p><strong>run.bat启动成功示例图</strong><br><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.7ai743l7jx80.webp" alt="run.bat启动成功示例图" title="run.bat启动成功示例图"><br><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.3ng72k9q81e0.webp" alt="run.bat启动成功示例图" title="run.bat启动成功示例图"></p><p><strong>放行端口(本地和局域网跳过此步)</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">登录你的服务器管理后台-防火墙-添加防火墙规则<br>TCP443（Windows和<span class="hljs-keyword">Android免证书登录端口）</span><br><span class="hljs-keyword"></span>UDP22102（游戏数据交互）<br>注意：有个别服务器可能还需要在系统界面防火墙放行端口。<br>WIN+R打开运行，输入 wf.msc，在入站规则选项最右侧，新建规则-端口，添加以上三个端口。<br>出站规则不需要更改，默认全开。<br></code></pre></td></tr></table></figure><p><strong>完成以上，服务端教程到此结束，接下来是客户端教程。</strong></p><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>自行准备客户端（即你现在的官服）。</p><h2 id="补丁安装"><a href="#补丁安装" class="headerlink" title="补丁安装"></a>补丁安装</h2><p>两个代理软件都支持自动安装和还原补丁，这里我还是用手动安装为教程。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">补丁下载路径：文末文件<span class="hljs-regexp">/客户端/</span><span class="hljs-number">3</span>.x-x服-UserAssembly.zip<br>下载完成解压得到：UserAssembly.dll<br></code></pre></td></tr></table></figure><p>打开以下路径</p><blockquote><p>国服：<code>Genshin Impact Game\YuanShen_Data\Native</code><br>国际服：<code>Genshin Impact Game\GenshinImpact_Data\Native</code></p></blockquote><p>此目录下面有一个 <code>UserAssembly.dll</code>，请把它重命名为 <code>UserAssembly-官服.dll</code>，否则你将无法进入官服。<br>复制刚才解压得到的 <code>UserAssembly.dll</code>到此目录代替原先的文件。</p><p>此时你的<code>Native</code>文件夹应该有两个文件</p><h2 id="Windows连接服务器"><a href="#Windows连接服务器" class="headerlink" title="Windows连接服务器"></a>Windows连接服务器</h2><p>这里一共提供2种方法，任选其一，切记所有代理软件都需要已管理员身份运行。</p><h3 id="mhy代理转向"><a href="#mhy代理转向" class="headerlink" title="mhy代理转向"></a>mhy代理转向</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载地址：文末文件<span class="hljs-regexp">/代理软件/m</span>hy代理转向.zip<br>地址：<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">443</span><br>代理端口：留空！！！！！！！！！！<br>地址填写说明：IP:<span class="hljs-number">443</span>端口(Dispatch端口)，切记使用英文符号。<br></code></pre></td></tr></table></figure><p><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.5kb835jmqwo0.webp" alt="代理设置示例图" title="代理设置示例图"></p><h3 id="Genshin代理助手"><a href="#Genshin代理助手" class="headerlink" title="Genshin代理助手"></a>Genshin代理助手</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载地址：文末文件<span class="hljs-regexp">/代理软件/</span>Genshin代理助手.zip<br>地址：本机搭建填写 <span class="hljs-number">127.0</span>.<span class="hljs-number">01</span> 服务器搭建填写 服务器公网IP 端口 <span class="hljs-number">443</span><br>填写完成-启动代理<br></code></pre></td></tr></table></figure><p><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.6i4fpvp7w7o0.webp" alt="Genshin代理助手" title="Genshin代理助手"><br><img src="https://rawgithub.rainkavik.com/FeiFei-SS/Rain-Photo/master/Blog_Passage/image.447vnhfy66w0.webp" alt="Genshin代理助手" title="Genshin代理助手"></p><h3 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h3><p>双击打开 <code>YuanShen.exe</code> 或 <code>GenshinImpact.exe</code>，启动客户端<br>在服务器 <code>run.bat</code> 运行窗口输入以下语法进行账户注册<br>语法：<code>account create 登录账号 UID</code><br>例如：<code>account create rainkavik 10000</code><br>返回客户端输入你注册的账号，密码可随便填</p><blockquote><p>进到游戏内，立即关闭代理 ：长时间代理，你流量全走服务器，你电脑和服务器都累，而且还可能会被服务商 ban 机！</p></blockquote><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><h3 id="指令使用说明"><a href="#指令使用说明" class="headerlink" title="指令使用说明"></a>指令使用说明</h3><p>以下两种方式都需要对应插件的支持，网盘服务端已经内置。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">PC</span>玩家请搭配 GrasscutterTools指令工具使用<br>下载地址：文末文件\其他\GrasscutterTools-<span class="hljs-built_in">v1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">6</span>.exe<br>手机玩家在游戏内输入/wt获得指令邮件(<span class="hljs-built_in">pc</span>端适用)<br></code></pre></td></tr></table></figure><p>最新版本需要使用指令点亮地图：&#x2F;prop unlockmap 1<br><strong>网盘内的视频教程可能已经过时。</strong></p><h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><p>本服务端基于开源项目 <a href="https://github.com/Grasscutters/Grasscutter">Grasscutter</a> 。</p><h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><p>文章所需文件 <a href="https://cloud.rainkavik.com/s/zLEHx?path=/">点我下载</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;本文仅供学习交流，严禁用于商业用途，侵权请&lt;a href=&quot;mailto:zigenb666@gamil.com&quot;&gt;联系我&lt;/a&gt;删除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文所需文件附于文末，请自取&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;序</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>QQ机器人AutMan安装及对接</title>
    <link href="http://zgtechnb666.github.io/2022/12/05/QQ%E6%9C%BA%E5%99%A8%E4%BA%BAAutMan%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AF%B9%E6%8E%A5/"/>
    <id>http://zgtechnb666.github.io/2022/12/05/QQ%E6%9C%BA%E5%99%A8%E4%BA%BAAutMan%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AF%B9%E6%8E%A5/</id>
    <published>2022-12-05T09:40:19.000Z</published>
    <updated>2022-12-05T09:43:02.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>相信很多人在安装傻妞是总会遇到各种各样的困难，今天，我就教大家部署另一个机器人——<strong>AutMan</strong>（<del>一听这个名字就知道一定很好用</del>）</p><h1 id="部署与安装"><a href="#部署与安装" class="headerlink" title="部署与安装"></a>部署与安装</h1><p>安装完成并启动后可进入autMan后台地址：<code>http://【你的IP】:autMan端口/fanli/static</code></p><ol><li>Linux类系统<br><strong>稳定版</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">s=autMan;f=fanli;a=arm64;<span class="hljs-keyword">if</span> [[ $(<span class="hljs-built_in">uname</span> -a | grep <span class="hljs-string">&quot;x86_64&quot;</span>) != <span class="hljs-string">&quot;&quot;</span> ]];<span class="hljs-keyword">then</span> a=amd64;<span class="hljs-keyword">fi</span> ;<span class="hljs-keyword">if</span> [ ! -d <span class="hljs-variable">$s</span> ];<span class="hljs-keyword">then</span> <span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$s</span>;<span class="hljs-keyword">fi</span> ;<span class="hljs-built_in">cd</span> <span class="hljs-variable">$s</span>;wget https://github.com/hdbjlizhe/<span class="hljs-variable">$&#123;f&#125;</span>/releases/download/main/autMan_<span class="hljs-variable">$a</span>.tar.gz &amp;&amp; tar -zxvf autMan_<span class="hljs-variable">$a</span>.tar.gz &amp;&amp; <span class="hljs-built_in">rm</span> -rf autMan_<span class="hljs-variable">$a</span>.tar.gz &amp;&amp; <span class="hljs-built_in">chmod</span> 777 <span class="hljs-variable">$s</span>;pkill -9 <span class="hljs-variable">$s</span>;$(<span class="hljs-built_in">pwd</span>)/<span class="hljs-variable">$s</span> -t;<br></code></pre></td></tr></table></figure></li></ol><p><strong>尝鲜版</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">s=autMan;f=fanli;a=arm64;<span class="hljs-keyword">if</span> [[ $(<span class="hljs-built_in">uname</span> -a | grep <span class="hljs-string">&quot;x86_64&quot;</span>) != <span class="hljs-string">&quot;&quot;</span> ]];<span class="hljs-keyword">then</span> a=amd64;<span class="hljs-keyword">fi</span> ;<span class="hljs-keyword">if</span> [ ! -d <span class="hljs-variable">$s</span> ];<span class="hljs-keyword">then</span> <span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$s</span>;<span class="hljs-keyword">fi</span> ;<span class="hljs-built_in">cd</span> <span class="hljs-variable">$s</span>;wget https://github.com/hdbjlizhe/<span class="hljs-variable">$&#123;f&#125;</span>/releases/download/debug/autMan_<span class="hljs-variable">$a</span>.tar.gz &amp;&amp; tar -zxvf autMan_<span class="hljs-variable">$a</span>.tar.gz &amp;&amp; <span class="hljs-built_in">rm</span> -rf autMan_<span class="hljs-variable">$a</span>.tar.gz &amp;&amp; <span class="hljs-built_in">chmod</span> 777 <span class="hljs-variable">$s</span>;pkill -9 <span class="hljs-variable">$s</span>;$(<span class="hljs-built_in">pwd</span>)/<span class="hljs-variable">$s</span> -t;<br></code></pre></td></tr></table></figure><p><strong>autMan(Linux系统含amd64\arm64)运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">进入autMan文件夹：<span class="hljs-built_in">cd</span> /root/autMan<br>指令启动：./autMan -t<br>静默指令：重启<br></code></pre></td></tr></table></figure><p><img src="https://images.zgtech.tech/?/images/2022/11/23/9UEmub6gaZ/start_autMan.jpg" alt="start_autMan" title="start_autMan"></p><ol start="2"><li>Windows系统<br>{fwalert type&#x3D;”info”}下载解压后直接运行exe文件{&#x2F;fwalert}</li></ol><p><strong>稳定版:</strong><a href="https://gh.zgtech.icu/https://github.com/hdbjlizhe/fanli/releases/download/main/autMan_win.tar.gz">稳定版点我下载</a></p><p><strong>尝鲜版:</strong><a href="https://gh.zgtech.icu/https://github.com/hdbjlizhe/fanli/releases/download/main/autMan_win.tar.gz">尝鲜版点我下载</a></p><p><strong>autMan(Windows系统含amd64\arm64)运行</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">启动windows命令提示符或powershell等命令行工具<br>进入autMan文件夹<br>指令启动：.\\autMan.exe -<span class="hljs-built_in">t</span><br>静默指令：重启<br></code></pre></td></tr></table></figure><p><img src="https://images.zgtech.tech/?/images/2022/11/23/kmrMrDqG6T/start_autMan_win.png" alt="start_autMan_win" title="start_autMan_win"></p><p>{fwcline start&#x3D;”#01d0ff” end&#x3D;”#fc3e85”}{&#x2F;fwcline}</p><ol start="3"><li>稳定版和尝鲜版</li></ol><p><strong>稳定版-&gt;尝鲜版</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">指令：<span class="hljs-built_in">set</span> autMan taste <span class="hljs-literal">true</span><br>指令：更新<br>或者用指令：更新尝鲜版<br></code></pre></td></tr></table></figure><p><strong>尝鲜版-&gt;稳定版</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">指令：<span class="hljs-built_in">set</span> autMan taste <span class="hljs-literal">false</span><br>指令：更新<br>或者用指令：更新稳定版<br></code></pre></td></tr></table></figure><p><strong>示例：</strong><br><img src="https://images.zgtech.tech/?/images/2022/11/23/jIVgSHzpJH/taste.png" alt="taste" title="taste"></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">设置更新时的代理指令：<span class="hljs-keyword">set</span> autMan ghproxy http:<span class="hljs-comment">//xxxx</span><br>开启或关闭更新时代理：<span class="hljs-keyword">set</span> autMan download_use_ghproxy <span class="hljs-literal">true</span>/<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>守护奥特曼情况下的更新</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">root账号ssh登陆，进入autMan文件夹<br>输入命令停止守护：systemctl <span class="hljs-literal">stop</span> autMan<br>手动运行奥特曼：./autMan -t<br>在奥特曼运行交互界面输入指令：更新<br>更新完成后关闭奥特曼，并杀死奥特曼后台。指令：pkill -<span class="hljs-number">9</span> autMan<br>启用守护：systemctl <span class="hljs-literal">start</span> autMan<br></code></pre></td></tr></table></figure></li><li><p>后台登录<br>安装完成并启动后可进入autMan后台地址：<code>http://autMan的ip:autMan端口/fanli/static</code></p></li></ol><p>首次使用需要设置登录密码,设置完成后跳转到登录页面，输入密码登录成功</p><p><strong>示例：</strong><br><img src="https://images.zgtech.tech/?/images/2022/11/23/wLIBbU1390/first_use.png" alt="first_use" title="first_use"></p><h1 id="对接账号"><a href="#对接账号" class="headerlink" title="对接账号"></a>对接账号</h1><h2 id="对接QQ"><a href="#对接QQ" class="headerlink" title="对接QQ"></a>对接QQ</h2><p>{fwalert type&#x3D;”warning”}说明：你要准备2个QQ号，1个用来做机器人，1个用来做管理员。<br>QQ框架目前可选方案有NODE-ONEBOT、OICQ、GO-CQHTTP等。下面以对接NODE-ONEBOT为例，对接OICQ可参见：HTTPS:&#x2F;&#x2F;GITHUB.COM&#x2F;TAKAYAMA-LILY&#x2F;OICQ&#x2F;TREE&#x2F;MASTER&#x2F;HTTP-API{&#x2F;fwalert}</p><ol><li>对接Linux版QQ<br><strong>screen运行oicq</strong><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">安装<span class="hljs-built_in">npm</span>，命令：apt install <span class="hljs-built_in">npm</span><br>安装oicq。命令：<span class="hljs-built_in">npm</span> i -g oicq@<span class="hljs-number">1</span><br>安装screen 命令：apt install screen<br>创建名称为oicq的新窗口命令：screen -S oicq<br>oicq配置文件在<span class="hljs-regexp">/root/</span>.oicq目录，名称为config.js，在其中配置反向ws地址<br>启动oicq命令：oicq，之后需要扫码或密码登录qq<br>等到运行起来后，就ctrl+A+D切回到主窗口，如果切不回去，就直接关掉ssh窗口，造成不要在oicq窗口ctrl+c，这样就会切断oicq的运行。<br></code></pre></td></tr></table></figure><strong>对接go-cqhttp(推荐)</strong></li></ol><p>{fwcode type&#x3D;”warning”}<br>由于文章篇幅有限制，请前往 <a href="https://blog.zgtech.icu/archives/go-cqhttp.html">https://blog.zgtech.icu/archives/go-cqhttp.html</a> 查看部署方法<br>{&#x2F;fwcode}</p><ol start="2"><li>对接Windows版QQ</li></ol><p><strong>下载文件</strong></p><p>下载windows版go-cqhttp，<a href="https://github.com.seafy.ml/Mrs4s/go-cqhttp/releases/">查看这里下载</a><br><img src="https://images.zgtech.tech/?/images/2022/11/23/5cNnA5zRaJ/go-cqhttp-win.png" alt="go-cqhttp-win" title="go-cqhttp-win"></p><p><strong>配置</strong></p><p>先双击运行一下exe文件go-cqhttp，会生成配置文件，配置文件中选择模式（如：手表模式），填写机器人qq号，反向ws地址那里填入<code>ws://autMan地址:autMan端口/qq/receive</code></p><p><strong>运行</strong></p><p>命令行启动运行,启动时扫码登录或输入密码登录</p><p><img src="https://images.zgtech.tech/?/images/2022/11/23/n9pa6ftVIH/go-cqhttp-run.png" alt="go-cqhttp-run" title="go-cqhttp-run"><br><strong>由于篇幅有限，我们下期再说 如何对接其他方式的 autMan 机器人</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;相信很多人在安装傻妞是总会遇到各种各样的困难，今天，我就教大家部署另一个机器人——&lt;strong&gt;AutMan&lt;/strong&gt;（&lt;del&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>autMan对接go-cqHttp保姆级教程</title>
    <link href="http://zgtechnb666.github.io/2022/12/05/autMan%E5%AF%B9%E6%8E%A5go-cqHttp%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B/"/>
    <id>http://zgtechnb666.github.io/2022/12/05/autMan%E5%AF%B9%E6%8E%A5go-cqHttp%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B/</id>
    <published>2022-12-05T09:39:15.000Z</published>
    <updated>2022-12-05T09:40:05.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>node-onebo用pm2，screen守护都不稳定，node-onebot扫码后ctrl+c，pm2没守护直接掉了，screen只能守护几个小时。因为服务器地区与你常登q的位置不同，时常有密码登入验证，导致验证失败。在密码无法登入的情况下，我们可以用go-cqHttp！</p><h1 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h1><h2 id="获取文件"><a href="#获取文件" class="headerlink" title="获取文件"></a>获取文件</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd autMan/   <span class="hljs-comment">#进入autMan根目录</span><br>mkdir go-cqhttp &amp;&amp; cd go-cqhttp   <span class="hljs-comment">#创建go-cqhttp文件夹并进入</span><br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Mrs4s/g</span>o-cqhttp<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.0.0-rc3/g</span>o-cqhttp_linux_amd64.tar.gz   <span class="hljs-comment">#拉取go-cqhttp文件</span><br>tar -zxvf go-cqhttp_linux_amd64.tar.gz   <span class="hljs-comment">#解压文件</span><br>./go-cqhttp   <span class="hljs-comment">#启动go-cqhttp</span><br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="https://images.zgtech.tech/?/images/2022/11/23/JwtqlA3vwn/635794398.png" alt="配置" title="配置"></p><p>选择 “<strong>3</strong>” ，然后回车，<code>Ctrl+c</code>结束进程</p><p><strong>修改配置文件</strong><br>{fwalert type&#x3D;”warning”}<br>如果是FinalShell，可以双击点开修改{&#x2F;fwalert}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /root/autMan/go-cqhttp<br>vim config.yml <br></code></pre></td></tr></table></figure><p>英文输入法下，按 <strong>i</strong> ，修改 <code>go-cqhttp</code> 默认配置文件的登陆账号，反代地址</p><p><img src="https://images.zgtech.tech/?/images/2022/11/23/ecikBey5qp/3357109154.png" alt="6" title="6"><br><img src="https://images.zgtech.tech/?/images/2022/11/23/XgEfd3brZ9/1995410760.png" alt="7" title="7"></p><ul><li>127.0.0.1 为服务器本地（指amtMan和go-cqHttp都在同一服务器）</li><li>8080 为amtMan的端口</li><li>请根据实际情况修改 :ws:&#x2F;&#x2F;127.0.0.1:8080&#x2F;qq&#x2F;receive<br>点击<code>Esc</code>键后输入<code>:wq</code>保存退出</li></ul><h2 id="守护"><a href="#守护" class="headerlink" title="守护"></a>守护</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./go-cqhttp   <span class="hljs-comment">#重新运行</span><br></code></pre></td></tr></table></figure><p>扫码登入后 <code>ctrl+c</code> 结束进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./go-cqhttp -d  <span class="hljs-comment">#后台运行</span><br></code></pre></td></tr></table></figure><h2 id="更换机器人"><a href="#更换机器人" class="headerlink" title="更换机器人"></a>更换机器人</h2><p>进入 <code>/go-cqhttp</code>目录把 <code>session.token</code> 文件删除即可然后重新运行扫码绑定</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>祝大家部署成功，autMan启航，我呢，自从用了go-cqhttp后就没发生过掉线的事了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;node-onebo用pm2，screen守护都不稳定，node-onebot扫码后ctrl+c，pm2没守护直接掉了，screen只能守护</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>破解CSDN复制和关注限制</title>
    <link href="http://zgtechnb666.github.io/2022/12/05/%E7%A0%B4%E8%A7%A3CSDN%E5%A4%8D%E5%88%B6%E5%92%8C%E5%85%B3%E6%B3%A8%E9%99%90%E5%88%B6/"/>
    <id>http://zgtechnb666.github.io/2022/12/05/%E7%A0%B4%E8%A7%A3CSDN%E5%A4%8D%E5%88%B6%E5%92%8C%E5%85%B3%E6%B3%A8%E9%99%90%E5%88%B6/</id>
    <published>2022-12-05T09:37:30.000Z</published>
    <updated>2022-12-05T09:38:04.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><p>　作为博客的大门派之一，CSDN 和子哥科技的运营方式一直以来都大相径庭，与子哥科技的简约、初心未改相比 CSDN 仿佛在商业化的道路上越走越远，现在 CSDN 不登录还无法复制文章内容了，一整个被无语到。而且还有这种强制恶心的关注 才能展开看到你想看的文章<img src="https://zigeltd.eu.org/?/gh/kevinlu98/freecdn@1.4//face/emotions/22.gif" alt="白眼"></p><h1 id="开始破解"><a href="#开始破解" class="headerlink" title="开始破解"></a>开始破解</h1><p> 这里以chrome浏览器为例<br>当你看到一篇CSDN文章的时候，底部会有<code>关注博主即可阅读全文</code>的字样。<br>此时你可以打开chrome浏览器的开发者工具（快捷键F12），然后切换到<code>控制台</code>界面。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var article_content=document.get<span class="hljs-constructor">ElementById(<span class="hljs-string">&quot;article_content&quot;</span>)</span>;<br>article_content.remove<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;style&quot;</span>)</span>;<br><br>var follow_text=document.get<span class="hljs-constructor">ElementsByClassName(&#x27;<span class="hljs-params">follow</span>-<span class="hljs-params">text</span>&#x27;)</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;<br>follow_text.parentElement.parentElement.remove<span class="hljs-constructor">Child(<span class="hljs-params">follow_text</span>.<span class="hljs-params">parentElement</span>)</span>;<br><br>var hide_article_box=document.get<span class="hljs-constructor">ElementsByClassName(&#x27; <span class="hljs-params">hide</span>-<span class="hljs-params">article</span>-<span class="hljs-params">box</span>&#x27;)</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;<br>hide_article_box.parentElement.remove<span class="hljs-constructor">Child(<span class="hljs-params">hide_article_box</span>)</span>;<br></code></pre></td></tr></table></figure><p>然后复制上面的javascript代码、回车就可以了, 你会惊奇的发现 不需要关注就可以阅读全部文章了<br>终于可以开心的阅读啦 哈哈哈哈!</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">javascript:<span class="hljs-built_in">document</span>.body.contentEditable=<span class="hljs-string">&#x27;true&#x27;</span>;<span class="hljs-built_in">document</span>.designMode=<span class="hljs-string">&#x27;on&#x27;</span>;<br></code></pre></td></tr></table></figure><p>然后复制上面的javascript代码、回车就可以了, 你会惊奇的发现 不需要关注就可以阅读全部文章了<br>终于可以随心所欲的复制啦 哈哈哈哈!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;吐槽&quot;&gt;&lt;a href=&quot;#吐槽&quot; class=&quot;headerlink&quot; title=&quot;吐槽&quot;&gt;&lt;/a&gt;吐槽&lt;/h1&gt;&lt;p&gt;　作为博客的大门派之一，CSDN 和子哥科技的运营方式一直以来都大相径庭，与子哥科技的简约、初心未改相比 CSDN 仿佛在商业化的道路上越走</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用CF Wocker搭建在线代理</title>
    <link href="http://zgtechnb666.github.io/2022/12/05/jsproxy-cf/"/>
    <id>http://zgtechnb666.github.io/2022/12/05/jsproxy-cf/</id>
    <published>2022-12-05T09:30:05.000Z</published>
    <updated>2022-12-05T09:36:53.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>今天看到一篇文章，主题是推荐大家用谷歌搜索，但众所周知，谷歌已经退出中国很久了，一般都需要借助工具才能访问，然后我又看到上面写了一个利用Jsproxy搭建代理可以访问谷歌，我就跟着试了一试，发现还挺好玩的，就分享出来了。</p><h1 id="Jsproxy"><a href="#Jsproxy" class="headerlink" title="Jsproxy"></a>Jsproxy</h1><p><strong>官方文档：</strong></p><blockquote><p>一个基于浏览器端 JS 实现的在线代理，Github项目地址：<a href="https://github.com/EtherDream/jsproxy">https://github.com/EtherDream/jsproxy</a></p></blockquote><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-27%20101417.png" alt="1" title="效果"></p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-27%20101506.png" alt="2" title="效果"></p><h1 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h1><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>{fwalert type&#x3D;”info”}该项目分为 CF-Wocker 版 与 服务器 版，本文讲述CF-Wocker 版的搭建方法{&#x2F;fwalert}</p><ol><li>打开 <a href="https://workers.cloudflare.com/">CF Wocker首页</a>，点击 <code>Sign up</code> 进行注册。</li><li>输入邮箱+密码，然后点击 <code>Create Account</code> 创建账户。</li><li>登录你刚刚注册用的邮箱，去接受一下Cloud Flare发给你的确认注册邮件</li><li>选一个你喜欢的英文单词作为子域名，然后点击 <code>Set Up subdomain</code> 。</li><li>再次确认，确认无误后点击 <code>Yes，Let‘s Go</code>。</li></ol><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li>点击 <code>Create a Worker</code> 创建一个项目。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20190811163949.webp" alt="3" title="3"></p><ol start="2"><li>在 <code>script</code> 左侧代码区，编写完毕后，点击 <code>Save and Deploy</code> 保存并部署下，就可以查看你的服务了。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/ub1w208mve.png" alt="4" title="4"></p><ol start="3"><li>选中下图红框部分的代码，按键盘上的 <code>退格键</code> 或者 <code>Delete键</code> 删掉</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20190811164154.webp" alt="5" title="5"></p><ol start="4"><li>将文末代码粘贴到刚刚你删除代码的地方，然后点击 <code>Save and Deploy</code> 保存并发布。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/xgxrbk7c00.png" alt="6" title="6"></p><ol start="5"><li>最后会让你二次确认一下，接着点击确认即可</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/20190811164501.webp" alt="7" title="7"></p><p>最后会返回刚刚创建项目的地方，你会得到一个地址（下图红框部分），复制这个地址，粘贴到浏览器打开</p><p><strong>PS：因为workers.devDNS污染事件，CFworkers默认域名后缀workers.dev被全线DNS污染，所以CFworkers默认域名已经越来越不稳定了，我们可以使用自己的自定义域名来解决。</strong></p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><ol><li>把自己的域名转移到CloudFlare，托管于CloudFlare，这个很简单，不会的可以自己百度。</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/222af4f7475fc504e0745d927dd4ce25.png" alt="8" title="8"></p><ol start="2"><li>在自己的域名新增一个DNS <code>AAAA记录</code>，名称自定义，<code>IPv6</code> 为 <code>100::</code> ，<code>最重要的是打开小黄云（CDN）</code></li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-27%20105144.png" alt="9" title="9"></p><ol start="3"><li><strong>进入你的域名，不是你的首页！</strong>，进入Workers，添加路由</li></ol><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/949c862c9143664dc5726efacb9f7898.png" alt="10" title="10"></p><ol start="4"><li>路由填写上一步的 <code>子域名 + /*</code>。</li></ol><p>{fwalert type&#x3D;”info”}比如我刚刚DNS解析的域名是 <code>proxy.xxxxx.cf</code> ，那在路由一栏则填写 <code>proxy.xxxxx.cf/*</code> ，服务选择需要自定义域名访问的Worker，就是你刚刚创建的Worker，表示通过这个自定义域名来访问Worker服务{&#x2F;fwalert}</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/7K6JMHH2T(G77ZV_%7D(X5BYJ.png" alt="11" title="11"></p><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>完成后就可以通过自定义的域名访问Worker服务了。</p><p><img src="https://gh.zgtech.icu/https://github.com/zgtechnb666/images/blob/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-11-27%20101417.png" alt="效果" title="效果"></p><h1 id="所需代码"><a href="#所需代码" class="headerlink" title="所需代码"></a>所需代码</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27;use strict&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * static files (404.html, sw.js, conf.js)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ASSET_URL</span> = <span class="hljs-string">&#x27;https://etherdream.github.io/jsproxy&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">JS_VER</span> = <span class="hljs-number">10</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAX_RETRY</span> = <span class="hljs-number">1</span><br><br><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;RequestInit&#125; */</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PREFLIGHT_INIT</span> = &#123;<br>  status: <span class="hljs-number">204</span>,<br>  headers: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(&#123;<br>    <span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span>,<br>    <span class="hljs-string">&#x27;access-control-allow-methods&#x27;</span>: <span class="hljs-string">&#x27;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#x27;</span>,<br>    <span class="hljs-string">&#x27;access-control-max-age&#x27;</span>: <span class="hljs-string">&#x27;1728000&#x27;</span>,<br>  &#125;),<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;any&#125; body</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;number&#125; status</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;Object&lt;string, string&gt;&#125; headers</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeRes</span>(<span class="hljs-params">body, status = <span class="hljs-number">200</span>, headers = &#123;&#125;</span>) </span>&#123;<br>  headers[<span class="hljs-string">&#x27;--ver&#x27;</span>] = JS_VER<br>  headers[<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>] = <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(body, &#123;status, headers&#125;)<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;string&#125; urlStr </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newUrl</span>(<span class="hljs-params">urlStr</span>) </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">URL</span>(urlStr)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>  &#125;<br>&#125;<br><br><br><span class="hljs-title function_ invoke__">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, e =&gt; &#123;<br>  <span class="hljs-keyword">const</span> ret = <span class="hljs-title function_ invoke__">fetchHandler</span>(e)<br>    .<span class="hljs-keyword">catch</span>(err =&gt; <span class="hljs-title function_ invoke__">makeRes</span>(<span class="hljs-string">&#x27;cfworker error:\n&#x27;</span> + err.stack, <span class="hljs-number">502</span>))<br>  e.<span class="hljs-title function_ invoke__">respondWith</span>(ret)<br>&#125;)<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;FetchEvent&#125; e </span><br><span class="hljs-comment"> */</span><br>async <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchHandler</span>(<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">req</span> = e.request<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">urlStr</span> = req.url<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">urlObj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">URL</span>(urlStr)<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">path</span> = urlObj.href.<span class="hljs-title function_ invoke__">substr</span>(urlObj.origin.length)<br><br>  <span class="hljs-keyword">if</span> (urlObj.protocol === <span class="hljs-string">&#x27;http:&#x27;</span>) &#123;<br>    urlObj.protocol = <span class="hljs-string">&#x27;https:&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">makeRes</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">301</span>, &#123;<br>      <span class="hljs-string">&#x27;strict-transport-security&#x27;</span>: <span class="hljs-string">&#x27;max-age=99999999; includeSubDomains; preload&#x27;</span>,<br>      <span class="hljs-string">&#x27;location&#x27;</span>: urlObj.href,<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (path.<span class="hljs-title function_ invoke__">startsWith</span>(<span class="hljs-string">&#x27;/http/&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">httpHandler</span>(req, path.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-number">6</span>))<br>  &#125;<br><br>  <span class="hljs-keyword">switch</span> (path) &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/http&#x27;</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">makeRes</span>(<span class="hljs-string">&#x27;请更新 cfworker 到最新版本!&#x27;</span>)<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/ws&#x27;</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">makeRes</span>(<span class="hljs-string">&#x27;not support&#x27;</span>, <span class="hljs-number">400</span>)<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/works&#x27;</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">makeRes</span>(<span class="hljs-string">&#x27;it works&#x27;</span>)<br>  <span class="hljs-keyword">default</span>:<br>    <span class="hljs-comment">// static files</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">fetch</span>(ASSET_URL + path)<br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;Request&#125; req</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;string&#125; pathname</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">httpHandler</span>(<span class="hljs-params">req, pathname</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">reqHdrRaw</span> = req.headers<br>  <span class="hljs-keyword">if</span> (reqHdrRaw.<span class="hljs-title function_ invoke__">has</span>(<span class="hljs-string">&#x27;x-jsproxy&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> Response.<span class="hljs-title function_ invoke__">error</span>()<br>  &#125;<br><br>  <span class="hljs-comment">// preflight</span><br>  <span class="hljs-keyword">if</span> (req.method === <span class="hljs-string">&#x27;OPTIONS&#x27;</span> &amp;&amp;<br>      reqHdrRaw.<span class="hljs-title function_ invoke__">has</span>(<span class="hljs-string">&#x27;access-control-request-headers&#x27;</span>)<br>  ) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-literal">null</span>, PREFLIGHT_INIT)<br>  &#125;<br><br>  let acehOld = <span class="hljs-literal">false</span><br>  let rawSvr = <span class="hljs-string">&#x27;&#x27;</span><br>  let rawLen = <span class="hljs-string">&#x27;&#x27;</span><br>  let rawEtag = <span class="hljs-string">&#x27;&#x27;</span><br><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">reqHdrNew</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(reqHdrRaw)<br>  reqHdrNew.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;x-jsproxy&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br><br>  <span class="hljs-comment">// 此处逻辑和 http-dec-req-hdr.lua 大致相同</span><br>  <span class="hljs-comment">// https://github.com/EtherDream/jsproxy/blob/master/lua/http-dec-req-hdr.lua</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">refer</span> = reqHdrNew.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;referer&#x27;</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">query</span> = refer.<span class="hljs-title function_ invoke__">substr</span>(refer.<span class="hljs-title function_ invoke__">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>) + <span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">if</span> (!query) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">makeRes</span>(<span class="hljs-string">&#x27;missing params&#x27;</span>, <span class="hljs-number">403</span>)<br>  &#125;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">param</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(query)<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [k, v] of Object.<span class="hljs-title function_ invoke__">entries</span>(param)) &#123;<br>    <span class="hljs-keyword">if</span> (k.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) === <span class="hljs-string">&#x27;--&#x27;</span>) &#123;<br>      <span class="hljs-comment">// 系统信息</span><br>      <span class="hljs-keyword">switch</span> (k.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-number">2</span>)) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;aceh&#x27;</span>:<br>        acehOld = <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;raw-info&#x27;</span>:<br>        [rawSvr, rawLen, rawEtag] = v.<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-string">&#x27;|&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 还原 HTTP 请求头</span><br>      <span class="hljs-keyword">if</span> (v) &#123;<br>        reqHdrNew.<span class="hljs-title function_ invoke__">set</span>(k, v)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        reqHdrNew.<span class="hljs-title function_ invoke__">delete</span>(k)<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!param.<span class="hljs-title function_ invoke__">has</span>(<span class="hljs-string">&#x27;referer&#x27;</span>)) &#123;<br>    reqHdrNew.<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;referer&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// cfworker 会把路径中的 `//` 合并成 `/`</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">urlStr</span> = pathname.<span class="hljs-title function_ invoke__">replace</span>(/^(https?):\/+/, <span class="hljs-string">&#x27;$1://&#x27;</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">urlObj</span> = <span class="hljs-title function_ invoke__">newUrl</span>(urlStr)<br>  <span class="hljs-keyword">if</span> (!urlObj) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">makeRes</span>(<span class="hljs-string">&#x27;invalid proxy url: &#x27;</span> + urlStr, <span class="hljs-number">403</span>)<br>  &#125;<br><br>  <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;RequestInit&#125; */</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">reqInit</span> = &#123;<br>    method: req.method,<br>    headers: reqHdrNew,<br>    redirect: <span class="hljs-string">&#x27;manual&#x27;</span>,<br>  &#125;<br>  <span class="hljs-keyword">if</span> (req.method === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    reqInit.body = req.body<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">proxy</span>(urlObj, reqInit, acehOld, rawLen, <span class="hljs-number">0</span>)<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;URL&#125; urlObj </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;RequestInit&#125; reqInit </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;number&#125; retryTimes </span><br><span class="hljs-comment"> */</span><br>async <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">proxy</span>(<span class="hljs-params">urlObj, reqInit, acehOld, rawLen, retryTimes</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">res</span> = await <span class="hljs-title function_ invoke__">fetch</span>(urlObj.href, reqInit)<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">resHdrOld</span> = res.headers<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">resHdrNew</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(resHdrOld)<br><br>  let expose = <span class="hljs-string">&#x27;*&#x27;</span><br>  <br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [k, v] of resHdrOld.<span class="hljs-title function_ invoke__">entries</span>()) &#123;<br>    <span class="hljs-keyword">if</span> (k === <span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span> ||<br>        k === <span class="hljs-string">&#x27;access-control-expose-headers&#x27;</span> ||<br>        k === <span class="hljs-string">&#x27;location&#x27;</span> ||<br>        k === <span class="hljs-string">&#x27;set-cookie&#x27;</span><br>    ) &#123;<br>      <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">x</span> = <span class="hljs-string">&#x27;--&#x27;</span> + k<br>      resHdrNew.<span class="hljs-title function_ invoke__">set</span>(x, v)<br>      <span class="hljs-keyword">if</span> (acehOld) &#123;<br>        expose = expose + <span class="hljs-string">&#x27;,&#x27;</span> + x<br>      &#125;<br>      resHdrNew.<span class="hljs-title function_ invoke__">delete</span>(k)<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (acehOld &amp;&amp;<br>      k !== <span class="hljs-string">&#x27;cache-control&#x27;</span> &amp;&amp;<br>      k !== <span class="hljs-string">&#x27;content-language&#x27;</span> &amp;&amp;<br>      k !== <span class="hljs-string">&#x27;content-type&#x27;</span> &amp;&amp;<br>      k !== <span class="hljs-string">&#x27;expires&#x27;</span> &amp;&amp;<br>      k !== <span class="hljs-string">&#x27;last-modified&#x27;</span> &amp;&amp;<br>      k !== <span class="hljs-string">&#x27;pragma&#x27;</span><br>    ) &#123;<br>      expose = expose + <span class="hljs-string">&#x27;,&#x27;</span> + k<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (acehOld) &#123;<br>    expose = expose + <span class="hljs-string">&#x27;,--s&#x27;</span><br>    resHdrNew.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;--t&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// verify</span><br>  <span class="hljs-keyword">if</span> (rawLen) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">newLen</span> = resHdrOld.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;content-length&#x27;</span>) || <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">badLen</span> = (rawLen !== newLen)<br><br>    <span class="hljs-keyword">if</span> (badLen) &#123;<br>      <span class="hljs-keyword">if</span> (retryTimes &lt; MAX_RETRY) &#123;<br>        urlObj = await <span class="hljs-title function_ invoke__">parseYtVideoRedir</span>(urlObj, newLen, res)<br>        <span class="hljs-keyword">if</span> (urlObj) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">proxy</span>(urlObj, reqInit, acehOld, rawLen, retryTimes + <span class="hljs-number">1</span>)<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">makeRes</span>(res.body, <span class="hljs-number">400</span>, &#123;<br>        <span class="hljs-string">&#x27;--error&#x27;</span>: `bad <span class="hljs-attr">len</span>: $&#123;newLen&#125;, <span class="hljs-attr">except</span>: $&#123;rawLen&#125;`,<br>        <span class="hljs-string">&#x27;access-control-expose-headers&#x27;</span>: <span class="hljs-string">&#x27;--error&#x27;</span>,<br>      &#125;)<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (retryTimes &gt; <span class="hljs-number">1</span>) &#123;<br>      resHdrNew.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;--retry&#x27;</span>, retryTimes)<br>    &#125;<br>  &#125;<br><br>  let status = res.status<br><br>  resHdrNew.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;access-control-expose-headers&#x27;</span>, expose)<br>  resHdrNew.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>  resHdrNew.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;--s&#x27;</span>, status)<br>  resHdrNew.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;--ver&#x27;</span>, JS_VER)<br><br>  resHdrNew.<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;content-security-policy&#x27;</span>)<br>  resHdrNew.<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;content-security-policy-report-only&#x27;</span>)<br>  resHdrNew.<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;clear-site-data&#x27;</span>)<br><br>  <span class="hljs-keyword">if</span> (status === <span class="hljs-number">301</span> ||<br>      status === <span class="hljs-number">302</span> ||<br>      status === <span class="hljs-number">303</span> ||<br>      status === <span class="hljs-number">307</span> ||<br>      status === <span class="hljs-number">308</span><br>  ) &#123;<br>    status = status + <span class="hljs-number">10</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(res.body, &#123;<br>    status,<br>    headers: resHdrNew,<br>  &#125;)<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;URL&#125; urlObj </span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isYtUrl</span>(<span class="hljs-params">urlObj</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    urlObj.host.<span class="hljs-title function_ invoke__">endsWith</span>(<span class="hljs-string">&#x27;.googlevideo.com&#x27;</span>) &amp;&amp;<br>    urlObj.pathname.<span class="hljs-title function_ invoke__">startsWith</span>(<span class="hljs-string">&#x27;/videoplayback&#x27;</span>)<br>  )<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;URL&#125; urlObj </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;number&#125; newLen </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;Response&#125; res </span><br><span class="hljs-comment"> */</span><br>async <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseYtVideoRedir</span>(<span class="hljs-params">urlObj, newLen, res</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (newLen &gt; <span class="hljs-number">2000</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">isYtUrl</span>(urlObj)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>  &#125;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">data</span> = await res.<span class="hljs-title function_ invoke__">text</span>()<br>    urlObj = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">URL</span>(data)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">isYtUrl</span>(urlObj)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> urlObj<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;今天看到一篇文章，主题是推荐大家用谷歌搜索，但众所周知，谷歌已经退出中国很久了，一般都需要借助工具才能访问，然后我又看到上面写了一个利用Js</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zgtechnb666.github.io/2022/12/05/hello-world/"/>
    <id>http://zgtechnb666.github.io/2022/12/05/hello-world/</id>
    <published>2022-12-05T06:33:41.485Z</published>
    <updated>2022-12-05T06:33:41.485Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
